<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>20210220 leetcode 第 46 场双周赛</title>
    <url>/acm/0220leetcode%E5%8F%8C%E5%91%A8%E8%B5%9B/</url>
    <content><![CDATA[<h1 id="21-02-21-双周赛（补题完成度【1-4】）"><a href="#21-02-21-双周赛（补题完成度【1-4】）" class="headerlink" title="[21.02.21]双周赛（补题完成度【1/4】）"></a>[21.02.21]双周赛（补题完成度【1/4】）</h1><ul>
<li>1.读错题祸害很大；<span id="more"></span></li>
<li>2.全局变量和初始化；</li>
<li>3.边界条件，及时退出，for循环有比较好的写法，应该练习；</li>
<li>4.c++的true和false是小写的；</li>
<li>5.如果把字符对应到数字，可以分别i-‘A’和i-‘a’，避免出错；</li>
<li>6.不要偷懒用一个数组记录两个变量，可能会出现意想不到的问题。案例：用同一个数组表示A和a是否出现，是做不到的；</li>
<li>7.std::string : append(<strong>number</strong>, char) / .length() / .c_str()  / .substr(begin_pos, <strong>new_len</strong>)</li>
<li>8.std::vector : .push_back() / .size() / .pop_back() (未验证）</li>
<li>9.std::pair : 把make_pair和pair和first和second的缩写搞下来。</li>
<li>10.ascii  : ‘a’ = ‘A’ + 32 ， 注意还原的位置  /</li>
</ul>
]]></content>
      <categories>
        <category>acm</category>
      </categories>
      <tags>
        <tag>acm</tag>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>20210223 Codeforces Round 704 (Div. 2)</title>
    <url>/acm/0223codeforces/</url>
    <content><![CDATA[<h1 id="21-02-23-codeforces-704-div2（补题完成度【4-5】）"><a href="#21-02-23-codeforces-704-div2（补题完成度【4-5】）" class="headerlink" title="[21.02.23]codeforces 704 div2（补题完成度【4/5】）"></a>[21.02.23]codeforces 704 div2（补题完成度【4/5】）</h1><p>复健选手的第一场cf，rating0-575。<br>现在的cf竟然是从灰名往上爬升了。还是说我已经是掉到灰名水平了。震惊。</p>
<span id="more"></span>
<ul>
<li>A是签到</li>
<li>B是算结论题。有样例就是方便，公式没推，注意细节想清楚。</li>
<li>C是字符串双向遍历。这次的代码下标和写法我还是比较满意的，还是细节有点马虎，注意边界。</li>
<li>D是构造题。比赛时候最后十几分钟，找了一个二进制减法计算起才发现万能的构造做法，没交上去。以前打acm的时候不会犯这种错误的。</li>
<li>E从感觉上像dp/搜索/构造成图论或网络流，暂时没做出来。</li>
</ul>
<hr>
<h2 id="D-Genius’s-Gambit"><a href="#D-Genius’s-Gambit" class="headerlink" title="D.Genius’s Gambit"></a>D.Genius’s Gambit</h2><p><strong>题意</strong>：两个二进制串s,t，每个串都是a个0和b个1组成，希望使他们二进制相减后有k个1，判断是否存在，存在则任意构造。<br><strong>思路</strong>：</p>
<ul>
<li>众所周知，二进制数某一位做减法时0-0=0，1-1=0。仅0-1或者1-0的时候相减会出现1。<ul>
<li>当1-0时，仅此位为1，对题意构造的k比较浪费。</li>
<li>当0-1时借位，导致之前的所有相等的位全部变成1，直到再碰到对应位不同的位置。<ul>
<li>如果碰到0-1，当位为0，继续向前借位。</li>
<li>如果碰到1-0，之后所有相等的位都是0.</li>
<li>s&gt;t且位数相同，所以总会碰见1-0的情况，因为s和t的0/1个数都相同，所以多余0-1对使构造复杂，应尽可能避免干扰。</li>
</ul>
</li>
</ul>
</li>
<li>列出基本的两种构造，不需要用的位都相等的列在前边，后面从右往左一组0-1，中间相等，直到碰到一组1-0停止。（不是最终答案）<ul>
<li>1x..x10000减1x..x00001，得到4个1</li>
<li>1x..x11110减1x..x01111，得到4个1</li>
<li>只要能拿出一些0和1构造这样的序列前面多少个按位对其x都行。因此，k&lt;a和k&lt;b-1的时候一定可构造。（s和t的首位都必须是1）<br>那么，k&gt;a and b一定不行吗？并不是（这段当时差几分钟没交上去）</li>
</ul>
</li>
<li>只要是s和t形如1x..x0和0x..x1，只要s和t按位对齐，这个过程中x是0或者1可以穿插出现。<ul>
<li>构造：s’=11..1 00..0。</li>
<li>按k从右到左找到01交换位:如果位置是1则和尾巴的0交换，</li>
<li>则作为t’=1..101..1 00..01。</li>
<li>s’和t’就符合要求啦。</li>
</ul>
</li>
</ul>
<p>例子：</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">4</span> <span class="number">5</span> <span class="number">6</span></span><br><span class="line"><span class="attribute">Yes</span></span><br><span class="line"><span class="attribute">111110000</span></span><br><span class="line"><span class="attribute">110110001</span></span><br></pre></td></tr></table></figure>
<ul>
<li>但这个方法有个问题：如果找到的位置的数字是0就没办法和末尾0交换了。</li>
<li>为了避免这种情况，可以在之前把对应位置和第二位往后任意一个1提前交换作为s，保证待交换位是1。这样只要k&lt;a+b-1，都可行。</li>
</ul>
<p>例子：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="number">4</span> <span class="number">5</span> <span class="number">2</span></span><br><span class="line"><span class="regexp">//</span> <span class="number">111110000</span> 需要交换倒数第<span class="number">3</span>位和倒数第<span class="number">1</span>位</span><br><span class="line"><span class="regexp">//</span> <span class="number">101110100</span> 倒数第<span class="number">3</span>位是<span class="number">0</span>，和正数第<span class="number">2</span>位的<span class="number">1</span>交换</span><br><span class="line"></span><br><span class="line">Yes</span><br><span class="line"><span class="number">101110100</span></span><br><span class="line"><span class="number">101110001</span></span><br></pre></td></tr></table></figure>
<ul>
<li>而k=a+b-1，k+00..1=100..0 (a+b位)，需要交换第一个数字，而第一个数字必须是1，总之不存在。</li>
</ul>
<p><strong>代码</strong>如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> ans[<span class="number">200005</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a,b,k;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;a, &amp;b, &amp;k);  <span class="comment">// (0, 1, k)</span></span><br><span class="line">    <span class="keyword">if</span>(k == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Yes\n&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; b; i++)<span class="built_in">printf</span>(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a; i++)<span class="built_in">printf</span>(<span class="string">&quot;0&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; b; i++)<span class="built_in">printf</span>(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a; i++)<span class="built_in">printf</span>(<span class="string">&quot;0&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(k == a+b || a==<span class="number">0</span> || b==<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;No\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(k &lt; a+b<span class="number">-1</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Yes\n&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; b; i++)ans[i] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = b; i &lt; b+a; i++)ans[i] = <span class="number">0</span>;</span><br><span class="line">        k = a+b-k<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">int</span> change = ans[k];</span><br><span class="line">        <span class="keyword">if</span>(change == <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; b+a; i++)<span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, ans[i]);<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">            ans[k] = <span class="number">0</span>;</span><br><span class="line">            ans[b+a<span class="number">-1</span>] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; b+a; i++)<span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, ans[i]);<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            ans[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">            ans[k] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; b+a; i++)<span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, ans[i]);<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">            ans[k] = <span class="number">0</span>;</span><br><span class="line">            ans[b+a<span class="number">-1</span>] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; b+a; i++)<span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, ans[i]);<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;No\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="C-Maximum-width"><a href="#C-Maximum-width" class="headerlink" title="C. Maximum width"></a>C. Maximum width</h2><p><strong>题意</strong>：长度为n的字符串s，长度为m的字符串t。找到s的子序列等于t。定义wideth为子序列中任意两字母相距位置的最大值。找到所有符合条件的子序列最大的width。<br><strong>思路</strong>：贪心。从左到右遍历s找一个最左边的子序列a，从右到左遍历s找一个最右边的子序列b，则答案的子序列为a的左半边和b的右半边拼接的结果，拼接位置遍历一遍。<br><strong>代码</strong>如下：</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">char</span> s[<span class="number">200005</span>];</span><br><span class="line"><span class="keyword">char</span> t[<span class="number">200005</span>];</span><br><span class="line"><span class="keyword">int</span> ans1[<span class="number">200005</span>];</span><br><span class="line"><span class="keyword">int</span> ans2[<span class="number">200005</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, s);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, t);</span><br><span class="line">    <span class="keyword">int</span> pointt=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> points=<span class="number">0</span>; points &lt; n; points++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(s[points] == t[pointt])&#123;ans1[pointt++]=points;<span class="keyword">if</span>(pointt == m)<span class="keyword">break</span>;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    pointt = m<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> points=n<span class="number">-1</span>; points &gt; <span class="number">-1</span>; points--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(s[points] == t[pointt])&#123;ans2[pointt--]=points;<span class="keyword">if</span>(pointt == <span class="number">-1</span>)<span class="keyword">break</span>;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++)&#123;</span><br><span class="line">        ans = <span class="built_in">max</span>(ans, ans2[i]-ans1[i<span class="number">-1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>acm</category>
      </categories>
      <tags>
        <tag>acm</tag>
        <tag>codeforces</tag>
      </tags>
  </entry>
  <entry>
    <title>2018年清华夏令营机试题（思想） 积木 二分+线段树</title>
    <url>/acm/2018%E6%B8%85%E5%8D%8E%E5%A4%8F%E4%BB%A4%E8%90%A5%E6%9C%BA%E8%AF%95%E9%A2%98%20%EF%BC%88%E6%80%9D%E6%83%B3%EF%BC%89%E7%A7%AF%E6%9C%A8%20%E4%BA%8C%E5%88%86+%E7%BA%BF%E6%AE%B5%E6%A0%91%20/</url>
    <content><![CDATA[<p>题目描述：一摞积木(1e5)，每个长宽都是1*1，高h，密度ρ，由题目输入。每块积木承重a，由题目输入（超重不会塌）。现在我从第一块开始一块一块的堆积木，问堆到第几块的时候超重体积超过V，V由题目输入。</p>
<span id="more"></span>

<p>思想：</p>
<p>首先，所有积木的超重体积随着积木的增多是单调递增的。因此可以用二分记录它在放上哪块积木时超重，然后用一个数组add记录放上某块积木时新增的超重部分的体积，求前缀和就是放上第i块后超重部分的总体积，最后二分查找一下V就可以了。当然题目是多组询问，也可以给询问排序后遍历一遍取得所有答案。</p>
<p>但是这里有个很大的问题，就是积木可能是有一部分超重，一部分没超重，不能看做一个整体。可以说在放上第i块积木时有一部分超重了，但是没有全超重，然后可能在放上第i+1块，第i+2块，…，第j块超重部分一直在增加，直到第j块放上整个积木完全超重体积不再增加。</p>
<p>任意时刻，F（下表面）= F（上表面） + G0（自重）。我可以二分一下每块积木的上下表面超重时分别是第几块，得到一个变换区间(i, j)。</p>
<p>在(i,j)变换区间内有一个有趣的问题，就是放上第k块积木时超重体积增加了多少呢。</p>
<p>假如一块积木S，在变换区间内的某时刻的超重临界点在P点，称重Fp。那么放上积木k的时候，Fp’ = Fp + G(k)。因此积木平衡点将上移直到抵消这个G(k)，而抵消是通过减少上方自重，因此从原来的临界点P到新的临界点P’，减少的积木重量为G(k)，即是新增超重部分的重量G(k)。则新增体积为V(s, k) = G(k) / ρ(s)。</p>
<p>值得一提的是边界i和j需要单独计算一下新增的超重部分体积，这个最后处理。i,j开区间内直接处理即可。</p>
<p>现在我定义一个公式A(s, k) = V(s, k) / G(k) = 1/ρ(s)。</p>
<p>我们需要分别求放上某块积木k的时候，其下方所有积木增加的重量，于是对于每一个在变换区间的积木x1, x2, …, xn，体积增加都是V(xi, k)。定义∑V(k)  = G(k) * ∑A(k)。</p>
<p>对于每块积木来说，在它变换区间范围内的点，虽然V不一定相同，但是A都是相同的1/ρ(s)。</p>
<p>因此可以给数组A构造一个线段树，初始化为0，对于每块积木s的变换区间（共n个）进行一次区间更新，给所有数加上1/ρ(s)，复杂度O(nlogn)，然后更新完依次取得每个点的最终值，复杂度O(nlogn)。</p>
<p>然后给每个点的最终值*G(k)，加到add上，将n个区间的边界分别加到add上，O(n)。</p>
<p>最后还是可以通过add的前缀数组处理多组询问的答案。</p>
<p>代码：2021年仍然不会写=w=。</p>
]]></content>
      <categories>
        <category>acm</category>
      </categories>
      <tags>
        <tag>acm</tag>
        <tag>机试</tag>
      </tags>
  </entry>
  <entry>
    <title>C++带有空格的字符串读取：cin.getline、getline、gets、正则表达式</title>
    <url>/acm/C++%20%E5%B8%A6%E6%9C%89%E7%A9%BA%E6%A0%BC%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%AF%BB%E5%8F%96%EF%BC%9Acin.getline%E3%80%81getline%E3%80%81gets%E3%80%81%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    <content><![CDATA[<p><a href="https://blog.csdn.net/ysf13579/article/details/23447945">参考</a><br><a href="https://bbs.csdn.net/topics/360010225">参考</a><br><a href="https://blog.csdn.net/tujiaw/article/details/6139896">参考</a></p>
<p>简单来说，cin.getline属于iostream，getline(cin, **) 属于string, gets属于C语言的cstdio。</p>
<span id="more"></span>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span><span class="built_in">cin</span>.getline(<span class="keyword">char</span>* tostr, <span class="keyword">int</span> maxlen, <span class="keyword">char</span> endch)</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>getline(<span class="built_in">cin</span>, <span class="built_in">string</span> toss, <span class="keyword">char</span> endch) </span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>gets(<span class="keyword">char</span>* tpstr) 不能自定义换行符，读到回车结束</span><br><span class="line"></span><br><span class="line">*<span class="built_in">cin</span>或<span class="built_in">scanf</span>(%d、%s)会留下一个换行符，直接在后面使用getline或<span class="built_in">cin</span>.getline或gets第一次会读到一个换行符。需要注意。</span><br><span class="line"></span><br><span class="line"><span class="number">4.</span><span class="built_in">scanf</span>(“%c”，ch）循环读取，比较麻烦。</span><br><span class="line"></span><br><span class="line"><span class="number">5.</span>正则表达式%[^\n]。注意它匹配成功后不会删除换行符。</span><br></pre></td></tr></table></figure>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> str[<span class="number">105</span>];</span><br><span class="line">    <span class="keyword">int</span> maxi;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;maxi;<span class="comment">//scanf也可</span></span><br><span class="line">    getchar();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; maxi; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%[^\n]&quot;</span>, str);</span><br><span class="line">        getchar();</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;str&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>acm</category>
        <category>C++</category>
        <category>char</category>
      </categories>
      <tags>
        <tag>acm</tag>
        <tag>char</tag>
        <tag>string</tag>
      </tags>
  </entry>
  <entry>
    <title>Codeforces 1006F Xor-Paths 双向dfs</title>
    <url>/acm/codeforces%201006F%20Xor-Paths%20%E5%8F%8C%E5%90%91dfs/</url>
    <content><![CDATA[<p><a href="http://codeforces.com/problemset/problem/1006/F">题目链接</a><br>题意：简而言之，一个m<em>n（20</em>20）的数组，每个点有个权值，从（1,1）出发，每次可以向下/右走一个格，取路径所有权值的异或和^，求有几条路使从起点到到（m,n）的时候异或和为K(1e18)。</p>
<span id="more"></span>
<p>思路：<br>第一反应是裸dp，然后发现dp[i][j][k] = dp[i-1][j][ k^map[i][j] ] + dp[i][j-1][ k^map[i][j] ]但是第三维度显然存不下。</p>
<p>然后想了想mn不大，用vector&lt;pair&lt;long long, long long&gt;&gt;试试，i*m+j标号，把转移的（k,time）对都存在数组里，使用完清空，MLE。然后想遍历vector如果有first相同的元素更新second, TLE。然后想想好像跟暴力也没啥大区别。</p>
<p>然后想用map&lt;pair&lt;pair&lt;int, int &gt;, long long &gt; &gt;或者map&lt;pair&lt;int, int&gt;, map<long long> &gt;，发现不会stl嵌套。</long></p>
<p>然后看了看大神的代码，dfs超时，但是只有一个双向搜索就能搞定，连剪纸都不太要，感觉自己十分愚蠢。异或是满足结合律的。而且这个搜索只要先搜一半再对比一半就ok了，连动态左一下右一下都不要。</p>
<p>meet-in-the-middle。对于这个二维数组，一端的扫描从（1,1）开始，到达x+y = *在从左下到右上的那条先作为中轴线停止，x+y固定，下标只需要知道x就能取得y，map<int>[long long]记录。然后从另一端找过来，也是到了中轴线就可以判断次数。这样极限条件下到达中线时两边搜索层数都在10-20层，时间复杂度很够用。</int></p>
<p>特别注意一下中线位置的x+y应该等于多少的细节问题</p>
<p>代码：</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">22</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> a[MAXN][MAXN];</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> KK, ans;</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">long</span> <span class="keyword">long</span>, <span class="keyword">long</span> <span class="keyword">long</span>&gt;mp[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs_down</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">long</span> <span class="keyword">long</span> maxn)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x + y == (n + m - <span class="number">1</span>) / <span class="number">2</span>)&#123;mp[x][maxn]++;<span class="keyword">return</span>;&#125;</span><br><span class="line">    <span class="keyword">if</span>(x &lt; n<span class="number">-1</span>)dfs_down(x+<span class="number">1</span>, y, maxn^a[x+<span class="number">1</span>][y]);</span><br><span class="line">    <span class="keyword">if</span>(y &lt; m<span class="number">-1</span>)dfs_down(x, y+<span class="number">1</span>, maxn^a[x][y+<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs_up</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">long</span> <span class="keyword">long</span> maxn)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x + y == (n + m - <span class="number">1</span>) / <span class="number">2</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(mp[x].<span class="built_in">find</span>(maxn ^ KK ^ a[x][y]) != mp[x].<span class="built_in">end</span>())&#123;</span><br><span class="line">            ans += mp[x][maxn ^ KK ^ a[x][y]];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(x &gt; <span class="number">0</span>)dfs_up(x<span class="number">-1</span>, y, maxn^a[x<span class="number">-1</span>][y]);</span><br><span class="line">    <span class="keyword">if</span>(y &gt; <span class="number">0</span>)dfs_up(x, y<span class="number">-1</span>, maxn^a[x][y<span class="number">-1</span>]);</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%lld&quot;</span>, &amp;n, &amp;m, &amp;KK);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; j++)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;a[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    dfs_down(<span class="number">0</span>,<span class="number">0</span>, a[<span class="number">0</span>][<span class="number">0</span>]);</span><br><span class="line">    dfs_up(n<span class="number">-1</span>, m<span class="number">-1</span>, a[n<span class="number">-1</span>][m<span class="number">-1</span>]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, ans);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>acm</category>
      </categories>
      <tags>
        <tag>acm</tag>
        <tag>codeforces</tag>
      </tags>
  </entry>
  <entry>
    <title>csp 201712-2 游戏 暴力，附：约瑟夫环的递推</title>
    <url>/acm/csp%20201712-2%20%E6%B8%B8%E6%88%8F%20%E6%9A%B4%E5%8A%9B+%EF%BC%88%E4%BB%A5%E6%AD%A4%E4%B8%BA%E4%BE%8B%EF%BC%89%E7%BA%A6%E7%91%9F%E5%A4%AB%E7%8E%AF%E7%9A%84%E9%80%92%E6%8E%A8/</url>
    <content><![CDATA[<p>中问题竟然愚蠢的看错题了。中文读题能力还不如英文，有待提升。</p>
<p>所以这道题用普通的数组模拟操作就可以了。总之跟暴力模拟的约瑟夫环没什么区别。</p>
<p>可以用next数组模拟指针做数据结构，但是数据范围不大的情况下不建议这么写，维护一个指针环写起来还是比较麻烦的。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1005</span>;</span><br><span class="line"><span class="keyword">bool</span> survive[MAXN];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        survive[i] = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> cnt = <span class="number">0</span>, snum = n;</span><br><span class="line">    <span class="keyword">int</span> idx = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span>(snum)</span><br><span class="line">    &#123;</span><br><span class="line">        idx = (idx + <span class="number">1</span>) % n;</span><br><span class="line">        <span class="keyword">if</span>(survive[idx] == <span class="literal">true</span>)&#123;</span><br><span class="line">            cnt++;</span><br><span class="line">            <span class="keyword">if</span>(cnt % k == <span class="number">0</span> || cnt % <span class="number">10</span> == k)&#123;</span><br><span class="line">                survive[idx] = <span class="literal">false</span>;</span><br><span class="line">                <span class="comment">//printf(&quot;%d\n&quot;, idx+1);</span></span><br><span class="line">                snum--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(snum == <span class="number">1</span>)<span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)<span class="keyword">if</span>(survive[i] == <span class="literal">true</span>)<span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, k;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;k);</span><br><span class="line">    <span class="keyword">int</span> ans = solve(n, k);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>但是突然想到比得十分GG的蓝桥杯国赛，必须要记录一下约瑟夫环的标准数学（找规律）解法。</p>
<p>将k固定，设解ANS[n,k] = ans(n)</p>
<p>具有m个数的m约瑟夫环中，删除一个数之后，相当于重新标号后的m-1约瑟夫环问题。</p>
<p>设从a(1)开始的m约瑟夫环答案为ans(m) = s，在m+1约瑟夫环中，由于经历了重新标号，m中的标号a(i)应该为a((k+i)%(m+1)) ,所以答案下标也要从s移动到(s+k)%(m+1).</p>
<p>公式：ans(1) = 1, ans(m+1) = (ans(m)+k)%(m+1)。代码如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">//标准约瑟夫环，非此题题解</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, k;</span><br><span class="line">    <span class="keyword">int</span> i, s = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;k);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">2</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        s = (s + k) % i;</span><br><span class="line">        <span class="comment">//printf(&quot;%d\n&quot;,s+1);</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span> (<span class="string">&quot;%d\n&quot;</span>, s+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>acm</category>
      </categories>
      <tags>
        <tag>acm</tag>
        <tag>csp</tag>
      </tags>
  </entry>
  <entry>
    <title>Codeforces 1012C Hills 比较简单的DP</title>
    <url>/acm/codeforces%201012C%20Hills%20%E6%AF%94%E8%BE%83%E7%AE%80%E5%8D%95%E7%9A%84DP/</url>
    <content><![CDATA[<p>刚刚拿到一个夏令营的offer，顺便在附近城市玩了两天，算起来出门在外有10天了？重新开始补题。</p>
<hr>
<p><a href="http://codeforces.com/problemset/problem/1012/C">题目链接</a></p>
<span id="more"></span>

<p>题意：输入一串数字代表一串山坡的高度，可以建房子的山坡的定义是这个山坡的高度严格比旁边两个山坡大。我可以用挖掘机挖山坡使其高度-1（可以减到负数）。现在要分别找到想建1-n/2个房子，问要挖掉的总高度的最小值。（n:5e3）</p>
<p>从题目知道我们房子显然不能两个贴在一起放，如果第i个山坡修了房子，则第i+1个山坡一定放不了房子，然后第i+2个山坡的左侧山坡可能在修第i个山坡的时候被挖掉了一块。所以i只对i+1和i+2都有影响。</p>
<p>直观的思想：定义dp[i][j][k]，i为现在计算第i个山坡的情况（如果空间不足可以滚动），j代表之前的这段区间修了j个房子，k代表上个房子的位置，状态取值为0-2，分别代表上个房子在很早以前（即对i无影响）、在第i个山坡、在第i-1个山坡（影响修i的时候挖掉的面积）。值为修到这里需要挖走的最小高度。</p>
<p>转移公式为:</p>
<p>dp[i][j][0] = min(dp[i-1][j][0], dp[i-1][j][2]);</p>
<p>dp[i][j][1] = min( dp[i-1][j][0]+max(0, h[i-1]-h[i]+1), dp[i-1][j][2]+max(0, max(0, min(h[i-2]-1, h[i-1]) - h[i] + 1 )(从2状态转移，提前计算i-1现在的高度)</p>
<p>dp[i][j][2] = dp[i-1][j][1]</p>
<p>然后我写了long long 的数组，悲剧的发现爆内存了，尤其是发现别人用int写的三种状态并没有爆内存。</p>
<p>然后发现所有2状态可以用公式3替换掉。但是需要注意的是这样的话最后求解对每个j需要算：min(dp[n-1][j][0], dp[n-1][j][1], dp[n-2][j][1])。这里很容易把第三项丢掉。</p>
<p>然后注意一下初始化，判断一下n=1的情况和边界，然后注意一下输出k的取值是(n+1)/2就可以了。</p>
<p>代码：</p>
<figure class="highlight inform7"><table><tr><td class="code"><pre><span class="line">#include &lt;bits/stdc++.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">const int MAXN = 5e3 + 3;</span><br><span class="line">const long long MAXLL = 9e18;</span><br><span class="line">long long h<span class="comment">[MAXN]</span>;</span><br><span class="line">long long dp<span class="comment">[MAXN]</span><span class="comment">[MAXN]</span><span class="comment">[2]</span>; //last <span class="keyword">is</span> i, now has j</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int n;</span><br><span class="line">    scanf(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    for(int i = 0; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        scanf(<span class="string">&quot;%lld&quot;</span>, &amp;h<span class="comment">[i]</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    for(int i = 0; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        for(int j = 0; j &lt;= n; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            dp<span class="comment">[i]</span><span class="comment">[j]</span><span class="comment">[0]</span> = MAXLL;</span><br><span class="line">            dp<span class="comment">[i]</span><span class="comment">[j]</span><span class="comment">[1]</span> = MAXLL;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    for(int i = 0; i &lt; n; i++)dp<span class="comment">[i]</span><span class="comment">[0]</span><span class="comment">[0]</span> = 0LL;</span><br><span class="line">    if(n == 1)</span><br><span class="line">    &#123;</span><br><span class="line">        printf(<span class="string">&quot;0\n&quot;</span>);return 0;</span><br><span class="line">    &#125;</span><br><span class="line">    if(n &gt; 1)dp<span class="comment">[0]</span><span class="comment">[1]</span><span class="comment">[1]</span> = max(0LL, h<span class="comment">[1]</span> - h<span class="comment">[0]</span> + 1LL);</span><br><span class="line">    for(int i = 2; i &lt; n; i++)dp<span class="comment">[0]</span><span class="comment">[i]</span><span class="comment">[0]</span> = dp<span class="comment">[0]</span><span class="comment">[i]</span><span class="comment">[1]</span>= MAXLL;</span><br><span class="line">    for(int i = 1; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        for(int j = 1; j &lt;= i/2 + 1; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            dp<span class="comment">[i]</span><span class="comment">[j]</span><span class="comment">[0]</span> = dp<span class="comment">[i-1]</span><span class="comment">[j]</span><span class="comment">[0]</span>;</span><br><span class="line">            if(i &gt; 1)dp<span class="comment">[i]</span><span class="comment">[j]</span><span class="comment">[0]</span> = min(dp<span class="comment">[i]</span><span class="comment">[j]</span><span class="comment">[0]</span>, dp<span class="comment">[i-2]</span><span class="comment">[j]</span><span class="comment">[1]</span>);</span><br><span class="line">            dp<span class="comment">[i]</span><span class="comment">[j]</span><span class="comment">[1]</span> = dp<span class="comment">[i-1]</span><span class="comment">[j-1]</span><span class="comment">[0]</span> + max(0LL, h<span class="comment">[i-1]</span> - h<span class="comment">[i]</span> + 1LL);</span><br><span class="line">            if(i &gt; 1)&#123;dp<span class="comment">[i]</span><span class="comment">[j]</span><span class="comment">[1]</span> = min(dp<span class="comment">[i]</span><span class="comment">[j]</span><span class="comment">[1]</span>, dp<span class="comment">[i-2]</span><span class="comment">[j-1]</span><span class="comment">[1]</span> + max(0LL, min(h<span class="comment">[i-2]</span>-1LL, h<span class="comment">[i-1]</span>) - h<span class="comment">[i]</span> + 1LL));&#125;</span><br><span class="line">            if(i &lt; n-1)dp<span class="comment">[i]</span><span class="comment">[j]</span><span class="comment">[1]</span> += max(0LL, h<span class="comment">[i+1]</span> - h<span class="comment">[i]</span> + 1LL);</span><br><span class="line">            //dp<span class="comment">[i]</span><span class="comment">[j]</span><span class="comment">[2]</span> = dp<span class="comment">[i-1]</span><span class="comment">[j]</span><span class="comment">[1]</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    /*for(int i = 0; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        for(int j = 0; j &lt; n; j++)printf(<span class="string">&quot;%lld:%lld &quot;</span>, dp<span class="comment">[i]</span><span class="comment">[j]</span><span class="comment">[0]</span>, dp<span class="comment">[i]</span><span class="comment">[j]</span><span class="comment">[1]</span>);printf(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;*/</span><br><span class="line">    long long ans = 0;</span><br><span class="line">    for(int i = 1; i &lt;= (n+1)/2; i++)&#123;</span><br><span class="line">        ans = min(dp<span class="comment">[n-1]</span><span class="comment">[i]</span><span class="comment">[0]</span>, min(dp<span class="comment">[n-1]</span><span class="comment">[i]</span><span class="comment">[1]</span>, dp<span class="comment">[n-2]</span><span class="comment">[i]</span><span class="comment">[1]</span>));</span><br><span class="line">        printf(<span class="string">&quot;%lld%c&quot;</span>, ans, i == n/2+1? &#x27;\n&#x27; : &#x27; &#x27;);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>acm</category>
      </categories>
      <tags>
        <tag>acm</tag>
        <tag>codeforces</tag>
      </tags>
  </entry>
  <entry>
    <title>csp 201712-3 Crontab （恶心的）string处理 大模拟</title>
    <url>/acm/csp%20201712-3%20Crontab%20%EF%BC%88%E6%81%B6%E5%BF%83%E7%9A%84%EF%BC%89string%E5%A4%84%E7%90%86%20%E5%A4%A7%E6%A8%A1%E6%8B%9F/</url>
    <content><![CDATA[<p><a href="http://118.190.20.162/view.page?gpid=T66">题目链接</a></p>
<p>然后贴上一份别人比我写得好看的<a href="https://blog.csdn.net/banana_cjb/article/details/79174688">代码</a></p>
<p>不得不说，不提前规划好怎么写，或者不用C++的string，或者写代码的时候不够心细，处理起来是很恶心的。所以考试的时候一定要先写简单的部分，否则这题性价比挺低的，尤其是错了点细节可能会让你写了上百行的代码得20分。</p>
<span id="more"></span>
<p><strong>本人遇到的问题：</strong></p>
<p>1.数组下标写错。代码能力所致。</p>
<p>2.erase写错，因为是多重遍历，跳出循环需要处理一下字符串。所以提前规划好要怎么写是很重要的，不要中途改来改去。</p>
<p>3.日期数错。这个就尴尬了，用了一个数组记某个月过去这一年多少天，也就是31.28.31.30…的前缀数组。但是我算错了一个数，硬生生少了40分。</p>
<p>4.看错题忽略掉关键细节。首先Jun这种表示法，大小写都有可能。最后的15分看了别人的代码才发现错哪了。然后数据范围是左闭右开。</p>
<p>5.整数和字符串转化问题。不同于java，这里的string拼接整数，不能用+加号，或者直接构造，否则会出现奇怪的结果。然后整数转字符串可以注意一下补位的问题。</p>
<p>6.合法数据的额外判断。4月31号， 非闰年的2月29号等之类的数据要额外排除掉。</p>
<p><strong>然后string的一些用法：</strong></p>
<p>1.size()和length()。取得字符串长度。size等同于其他STL，length在string中刚好是同义词，就是说用哪个都可以。</p>
<p>2.at()和[]。取得某个位置的元素可以用at(i)后者直接下标访问。</p>
<p>3.+和append。用来拼接。append可以添加另一个字符的子串（string str, int pos, int len），或者多个相同字符（int time, char ch）</p>
<p>4.erase。用来删除从pos开始的len长度的字符（int pos, int len）。或删除一个或两个迭代器之间的字符。</p>
<p>5.find。用来查找某个字符串中某字符/串第一次出现的位置，没有返回npos。（str/char，pos=0）.</p>
<p>6.substr。返回某个字符串从pos开始，长度为len的子串。</p>
<p>7.replace。把某个字符串，从pos开始，长度为len的串，替换成新串。（pos, len, string newstr）</p>
<p><strong>然后处理逻辑：</strong><br>每个指令存5个string类型的vector，分别记录其合法分、小时、天、月、星期的两位字符串。通过遍历找到所有合法组，用星期和范围判断是否是一个指令，把拼接成的字符串存起来，最后通过排序得到按时间排序的指令集。</p>
<ul>
<li><p>数据处理：</p>
<ul>
<li><p>1.将Week和Month的英文串替换成数字。用两个数组遍历查找一遍即可。</p>
</li>
<li><p>2.将可能出现的数字替换成两位的字符串。可能会有补位问题。</p>
</li>
<li><p>3.处理<em>。如果是</em>将范围内所有数丢进vector。</p>
</li>
<li><p>4.否则按步骤循环处理每个,</p>
</li>
<li><p>5.在处理一组,隔开的解时，判断是否有-，有则转换整数将范围内所有数丢进vector，否则将整体丢进vector。</p>
</li>
</ul>
</li>
<li><p>遍历判断：</p>
<ul>
<li><p>1.通过5重循环（年、月、日、时、分）拼接字符串，一边拼接一边判断是否超过范围，超过修改str并continue.</p>
</li>
<li><p>2.遍历之前判重，避免插入重复数据（理论上来说不会）</p>
</li>
<li><p>3.走到最内层时。将特殊不合法日期去掉。并计算一下星期，查找是否在合法week_vector中，如果不在去掉。</p>
<p>代码：</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="built_in">string</span> Months[] = &#123;<span class="string">&quot; &quot;</span>, <span class="string">&quot;jan&quot;</span>, <span class="string">&quot;feb&quot;</span>, <span class="string">&quot;mar&quot;</span>, <span class="string">&quot;apr&quot;</span>, <span class="string">&quot;may&quot;</span>, <span class="string">&quot;jun&quot;</span>, <span class="string">&quot;jul&quot;</span>, <span class="string">&quot;aug&quot;</span>, <span class="string">&quot;sep&quot;</span>, <span class="string">&quot;oct&quot;</span>, <span class="string">&quot;nov&quot;</span>, <span class="string">&quot;dec&quot;</span>&#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="built_in">string</span> Weekdays[] = &#123;<span class="string">&quot;sun&quot;</span>, <span class="string">&quot;mon&quot;</span>, <span class="string">&quot;tue&quot;</span>, <span class="string">&quot;wed&quot;</span>, <span class="string">&quot;thu&quot;</span>, <span class="string">&quot;fri&quot;</span>, <span class="string">&quot;sat&quot;</span>&#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> Dnum[] = &#123;<span class="number">0</span>, <span class="number">31</span>, <span class="number">59</span>, <span class="number">90</span>, <span class="number">120</span>, <span class="number">151</span>, <span class="number">181</span>, <span class="number">212</span>, <span class="number">243</span>, <span class="number">273</span>, <span class="number">304</span>, <span class="number">334</span>, <span class="number">365</span>&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="built_in">string</span> sttime, edtime;<span class="comment">//起止时间，左闭右开</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Ans</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="built_in">string</span> time, work;</span><br><span class="line"> </span><br><span class="line">&#125;Ans;</span><br><span class="line"><span class="built_in">vector</span>&lt;Ans&gt;ans;<span class="comment">//答案组，多条指令不清空。</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">const</span> Ans &amp;a, <span class="keyword">const</span> Ans &amp;b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.time &lt; b.time;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Order</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; mm, hh, DD, MM, Wek;</span><br><span class="line">    <span class="built_in">string</span> work;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        mm.<span class="built_in">clear</span>(), hh.<span class="built_in">clear</span>(), DD.<span class="built_in">clear</span>(), MM.<span class="built_in">clear</span>(), Wek.<span class="built_in">clear</span>();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//----------- string和int转换--------------</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">stoi</span><span class="params">(<span class="built_in">string</span> str)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//cout&lt;&lt;&quot;stoi:&quot;&lt;&lt;str&lt;&lt;endl;</span></span><br><span class="line">        <span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(str != <span class="string">&quot;&quot;</span>)&#123;</span><br><span class="line">            ret *= <span class="number">10</span>;</span><br><span class="line">            ret += str.at(<span class="number">0</span>) - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">            str = str.substr(<span class="number">1</span>, str.<span class="built_in">size</span>() - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">itos</span><span class="params">(<span class="keyword">int</span> ipt)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">string</span> ret = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">while</span>(ipt)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">char</span> ch = ipt % <span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">            ipt /= <span class="number">10</span>;</span><br><span class="line">            ret = ch + ret;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(ret.<span class="built_in">size</span>() &lt; <span class="number">2</span>)ret = <span class="string">&#x27;0&#x27;</span> + ret;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//------------修改过的replaceAll(C++里没有)--------------</span></span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">replaceAll</span><span class="params">(<span class="built_in">string</span> oldstr, <span class="built_in">string</span> old_value, <span class="built_in">string</span> new_value)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//cout&lt;&lt;&quot;replaceAll&quot;&lt;&lt;oldstr&lt;&lt;&quot;: &quot;&lt;&lt;old_value&lt;&lt;&quot;-&gt;&quot;&lt;&lt;new_value&lt;&lt;endl;</span></span><br><span class="line">        <span class="keyword">int</span> pos = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; oldstr.length(); i++)<span class="keyword">if</span>(oldstr[i] &lt;= <span class="string">&#x27;Z&#x27;</span> &amp;&amp; oldstr[i] &gt;= <span class="string">&#x27;A&#x27;</span>)oldstr[i] = oldstr[i] - <span class="string">&#x27;A&#x27;</span> + <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">        <span class="keyword">while</span>((pos=oldstr.<span class="built_in">find</span>(old_value))!=<span class="built_in">string</span>::npos)   &#123;</span><br><span class="line">                oldstr = oldstr.replace(pos,old_value.<span class="built_in">size</span>(),new_value);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> oldstr;</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//------------分别处理5个数据。因为逻辑基本相同，理论上来说可以带上vector参数用一个函数实现。</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">convMin</span><span class="params">(<span class="built_in">string</span> str)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">string</span> strn;</span><br><span class="line">        <span class="built_in">string</span> pb;</span><br><span class="line">        <span class="keyword">if</span>(str == <span class="string">&quot;*&quot;</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">60</span>; i++)&#123;pb = itos(i); mm.push_back(pb);&#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">while</span>(str != <span class="string">&quot;&quot;</span>)&#123;</span><br><span class="line">                <span class="keyword">int</span> pos;</span><br><span class="line">                <span class="keyword">if</span>((pos = str.<span class="built_in">find</span>(<span class="string">&#x27;,&#x27;</span>)) != <span class="built_in">string</span>::npos)&#123;</span><br><span class="line">                        strn = str.substr(<span class="number">0</span>, pos);</span><br><span class="line">                str = str.substr(pos+<span class="number">1</span>, str.<span class="built_in">size</span>() - pos);&#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;strn = str; str = <span class="string">&quot;&quot;</span>;&#125;</span><br><span class="line">                <span class="keyword">int</span> posn;</span><br><span class="line">                <span class="keyword">if</span>((posn = strn.<span class="built_in">find</span>(<span class="string">&#x27;-&#x27;</span>)) != <span class="built_in">string</span>::npos)&#123;</span><br><span class="line">                    <span class="built_in">string</span> left = strn.substr(<span class="number">0</span>, posn);</span><br><span class="line">                    <span class="keyword">int</span> il = stoi(left);</span><br><span class="line">                    <span class="built_in">string</span> right = strn.substr(posn+<span class="number">1</span>, strn.<span class="built_in">size</span>()-posn);</span><br><span class="line">                    <span class="keyword">int</span> ir = stoi(right);</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> i = il; i &lt;= ir; i++)&#123;pb = itos(i); mm.push_back(pb);&#125;</span><br><span class="line"> </span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> mm.push_back(itos(stoi(strn)));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/*cout&lt;&lt;&quot;mm:&quot;&lt;&lt;endl;</span></span><br><span class="line"><span class="comment">        for(int i = 0; i &lt; mm.size(); i++)cout&lt;&lt;mm[i]&lt;&lt;&quot; &quot;;</span></span><br><span class="line"><span class="comment">        cout&lt;&lt;endl;*/</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">convHour</span><span class="params">(<span class="built_in">string</span> str)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">string</span> strn;</span><br><span class="line">        <span class="built_in">string</span> pb;</span><br><span class="line">        <span class="keyword">if</span>(str == <span class="string">&quot;*&quot;</span>)<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">24</span>; i++)&#123;pb = itos(i); hh.push_back(pb);&#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">while</span>(str != <span class="string">&quot;&quot;</span>)&#123;</span><br><span class="line">                <span class="keyword">int</span> pos, posn;</span><br><span class="line">                <span class="keyword">if</span>((pos = str.<span class="built_in">find</span>(<span class="string">&#x27;,&#x27;</span>)) != <span class="built_in">string</span>::npos)&#123;strn = str.substr(<span class="number">0</span>, pos);str = str.substr(pos+<span class="number">1</span>, str.<span class="built_in">size</span>() - pos);&#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;strn = str; str = <span class="string">&quot;&quot;</span>;&#125;</span><br><span class="line">                <span class="keyword">if</span>((posn = strn.<span class="built_in">find</span>(<span class="string">&#x27;-&#x27;</span>)) != <span class="built_in">string</span>::npos)&#123;</span><br><span class="line">                    <span class="built_in">string</span> left = strn.substr(<span class="number">0</span>, posn);</span><br><span class="line">                    <span class="keyword">int</span> il = stoi(left);</span><br><span class="line">                    <span class="built_in">string</span> right = strn.substr(posn+<span class="number">1</span>, strn.<span class="built_in">size</span>()-posn);</span><br><span class="line">                    <span class="keyword">int</span> ir = stoi(right);</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> i = il; i &lt;= ir; i++)&#123;pb = itos(i); hh.push_back(pb);&#125;</span><br><span class="line"> </span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> hh.push_back(itos(stoi(strn)));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/*cout&lt;&lt;&quot;hh:&quot;&lt;&lt;endl;</span></span><br><span class="line"><span class="comment">        for(int i = 0; i &lt; hh.size(); i++)cout&lt;&lt;hh[i]&lt;&lt;&quot; &quot;;</span></span><br><span class="line"><span class="comment">        cout&lt;&lt;endl;*/</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">convDay</span><span class="params">(<span class="built_in">string</span> str)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">string</span> strn;</span><br><span class="line">        <span class="built_in">string</span> pb;</span><br><span class="line">        <span class="keyword">if</span>(str == <span class="string">&quot;*&quot;</span>)<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">32</span>; i++)&#123;pb = itos(i); DD.push_back(pb);&#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">while</span>(str != <span class="string">&quot;&quot;</span>)&#123;</span><br><span class="line">                <span class="keyword">int</span> pos, posn;</span><br><span class="line">                <span class="keyword">if</span>((pos = str.<span class="built_in">find</span>(<span class="string">&#x27;,&#x27;</span>)) != <span class="built_in">string</span>::npos)&#123;strn = str.substr(<span class="number">0</span>, pos);str = str.substr(pos+<span class="number">1</span>, str.<span class="built_in">size</span>() - pos);&#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;strn = str; str = <span class="string">&quot;&quot;</span>;&#125;</span><br><span class="line">                <span class="keyword">if</span>((posn = strn.<span class="built_in">find</span>(<span class="string">&#x27;-&#x27;</span>)) != <span class="built_in">string</span>::npos)&#123;</span><br><span class="line">                    <span class="built_in">string</span> left = strn.substr(<span class="number">0</span>, posn);</span><br><span class="line">                    <span class="keyword">int</span> il = stoi(left);</span><br><span class="line">                    <span class="built_in">string</span> right = strn.substr(posn+<span class="number">1</span>, strn.<span class="built_in">size</span>()-posn);</span><br><span class="line">                    <span class="keyword">int</span> ir = stoi(right);</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> i = il; i &lt;= ir; i++)&#123;pb = itos(i); DD.push_back(pb);&#125;</span><br><span class="line"> </span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> DD.push_back(itos(stoi(strn)));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/*cout&lt;&lt;&quot;DD:&quot;&lt;&lt;endl;</span></span><br><span class="line"><span class="comment">        for(int i = 0; i &lt; DD.size(); i++)cout&lt;&lt;DD[i]&lt;&lt;&quot; &quot;;</span></span><br><span class="line"><span class="comment">        cout&lt;&lt;endl;*/</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">convMon</span><span class="params">(<span class="built_in">string</span> str)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">string</span> strn;</span><br><span class="line">        <span class="built_in">string</span> pb;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">12</span>; i++)&#123;</span><br><span class="line">            pb = itos(i);</span><br><span class="line">            str = replaceAll(str, Months[i], pb);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(str == <span class="string">&quot;*&quot;</span>)<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">13</span>; i++)&#123;pb = itos(i);MM.push_back(pb);&#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> pos, posn;</span><br><span class="line">            <span class="keyword">while</span>(str != <span class="string">&quot;&quot;</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>((pos = str.<span class="built_in">find</span>(<span class="string">&#x27;,&#x27;</span>)) != <span class="built_in">string</span>::npos)&#123;strn = str.substr(<span class="number">0</span>, pos);str = str.substr(pos+<span class="number">1</span>, str.<span class="built_in">size</span>() - pos);&#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;strn = str; str = <span class="string">&quot;&quot;</span>;&#125;</span><br><span class="line">                <span class="keyword">if</span>((posn = strn.<span class="built_in">find</span>(<span class="string">&#x27;-&#x27;</span>)) != <span class="built_in">string</span>::npos)&#123;</span><br><span class="line">                    <span class="built_in">string</span> left = strn.substr(<span class="number">0</span>, posn);</span><br><span class="line">                    <span class="keyword">int</span> il = stoi(left);</span><br><span class="line">                    <span class="built_in">string</span> right = strn.substr(posn+<span class="number">1</span>, strn.<span class="built_in">size</span>()-posn);</span><br><span class="line">                    <span class="keyword">int</span> ir = stoi(right);</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> i = il; i &lt;= ir; i++)&#123;pb = itos(i);MM.push_back(pb);&#125;</span><br><span class="line"> </span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> MM.push_back(itos(stoi(strn)));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">convWek</span><span class="params">(<span class="built_in">string</span> str)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">string</span> strn;</span><br><span class="line">        <span class="built_in">string</span> pb;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">7</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            pb = itos(i);</span><br><span class="line">            str = replaceAll(str, Weekdays[i], pb);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(str == <span class="string">&quot;*&quot;</span>)<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">7</span>; i++)&#123;pb = itos(i); Wek.push_back(pb);&#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> pos , posn;</span><br><span class="line">            <span class="keyword">while</span>(str != <span class="string">&quot;&quot;</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>((pos = str.<span class="built_in">find</span>(<span class="string">&#x27;,&#x27;</span>)) != <span class="built_in">string</span>::npos)&#123;strn = str.substr(<span class="number">0</span>, pos);str = str.substr(pos+<span class="number">1</span>, str.<span class="built_in">size</span>() - pos);&#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;strn = str; str = <span class="string">&quot;&quot;</span>;&#125;</span><br><span class="line">                <span class="keyword">if</span>((posn = strn.<span class="built_in">find</span>(<span class="string">&#x27;-&#x27;</span>)) != <span class="built_in">string</span>::npos)&#123;</span><br><span class="line">                    <span class="built_in">string</span> left = strn.substr(<span class="number">0</span>, posn);</span><br><span class="line">                    <span class="keyword">int</span> il = stoi(left);</span><br><span class="line">                    <span class="built_in">string</span> right = strn.substr(posn+<span class="number">1</span>, strn.<span class="built_in">size</span>()-posn);</span><br><span class="line">                    <span class="keyword">int</span> ir = stoi(right);</span><br><span class="line">                    <span class="comment">//cout&lt;&lt;left&lt;&lt;&quot; -- &quot;&lt;&lt;right&lt;&lt;endl;</span></span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> i = il; i &lt;= ir; i++)&#123;pb = itos(i); Wek.push_back(pb);&#125;</span><br><span class="line"> </span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> Wek.push_back(itos(stoi(strn)));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//-------判断闰年和查找星期------------</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">luyear</span><span class="params">(<span class="keyword">int</span> year)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> year%<span class="number">400</span> == <span class="number">0</span> || (year%<span class="number">100</span> != <span class="number">0</span> &amp;&amp; year%<span class="number">4</span> == <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getWeekday</span><span class="params">(<span class="built_in">string</span> str)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">4</span>;</span><br><span class="line">        <span class="keyword">int</span> year = stoi(str.substr(<span class="number">0</span>, <span class="number">4</span>));</span><br><span class="line">        <span class="keyword">int</span> month = stoi(str.substr(<span class="number">4</span>, <span class="number">2</span>));</span><br><span class="line">        <span class="keyword">int</span> day = stoi(str.substr(<span class="number">6</span>, <span class="number">2</span>));</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1970</span>; i &lt; year; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(luyear(i))ans += <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">else</span> ans += <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ans %= <span class="number">7</span>;</span><br><span class="line">        ans += Dnum[month<span class="number">-1</span>];</span><br><span class="line">        <span class="keyword">if</span>(luyear(year) &amp;&amp; month &gt; <span class="number">2</span>)ans++;</span><br><span class="line">        ans %= <span class="number">7</span>;</span><br><span class="line">        ans += day<span class="number">-1</span>;</span><br><span class="line">        ans %= <span class="number">7</span>;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//创建ans组集</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">getAns</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">string</span> str;</span><br><span class="line">        sort(mm.<span class="built_in">begin</span>(), mm.<span class="built_in">end</span>());</span><br><span class="line">        sort(hh.<span class="built_in">begin</span>(), hh.<span class="built_in">end</span>());</span><br><span class="line">        sort(DD.<span class="built_in">begin</span>(), DD.<span class="built_in">end</span>());</span><br><span class="line">        sort(MM.<span class="built_in">begin</span>(), MM.<span class="built_in">end</span>());</span><br><span class="line">        sort(Wek.<span class="built_in">begin</span>(), Wek.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> y = stoi(sttime.substr(<span class="number">0</span>, <span class="number">4</span>)); y &lt;= stoi(edtime.substr(<span class="number">0</span>, <span class="number">4</span>)); y++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> l = <span class="number">0</span>; l &lt; MM.<span class="built_in">size</span>(); l++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(l &gt; <span class="number">0</span> &amp;&amp; MM[l] == MM[l<span class="number">-1</span>])&#123;str.erase(<span class="number">4</span>, <span class="number">2</span>);<span class="keyword">continue</span>;&#125;</span><br><span class="line">                str = itos(y) + MM[l];</span><br><span class="line">                <span class="keyword">if</span>(str &lt; sttime.substr(<span class="number">0</span>, <span class="number">6</span>) || str &gt; edtime.substr(<span class="number">0</span>, <span class="number">6</span>))&#123;str.erase(<span class="number">4</span>, <span class="number">2</span>);<span class="keyword">continue</span>;&#125;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; DD.<span class="built_in">size</span>(); k++)</span><br><span class="line">                &#123;</span><br><span class="line">                    str = itos(y) + MM[l] + DD[k];</span><br><span class="line">                    <span class="keyword">if</span>(k &gt; <span class="number">0</span> &amp;&amp; DD[k] == DD[k<span class="number">-1</span>])&#123;str.erase(<span class="number">6</span>, <span class="number">2</span>);<span class="keyword">continue</span>;&#125;</span><br><span class="line">                    <span class="keyword">if</span>(str &lt; sttime.substr(<span class="number">0</span>, <span class="number">8</span>) || str &gt; edtime.substr(<span class="number">0</span>, <span class="number">8</span>))&#123;str.erase(<span class="number">6</span>, <span class="number">2</span>);<span class="keyword">continue</span>;&#125;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; hh.<span class="built_in">size</span>(); j++)&#123;</span><br><span class="line">                        <span class="keyword">if</span>(j &gt; <span class="number">0</span> &amp;&amp; hh[j] == hh[j<span class="number">-1</span>])&#123;str.erase(<span class="number">8</span>, <span class="number">2</span>);<span class="keyword">continue</span>;&#125;</span><br><span class="line">                        str = itos(y) + MM[l] + DD[k] +  hh[j];</span><br><span class="line">                        <span class="keyword">if</span>(str &lt; sttime.substr(<span class="number">0</span>, <span class="number">10</span>) || str &gt; edtime.substr(<span class="number">0</span>, <span class="number">10</span>))&#123;str.erase(<span class="number">8</span>, <span class="number">2</span>);<span class="keyword">continue</span>;&#125;</span><br><span class="line">                        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; mm.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">                            <span class="keyword">if</span>(i &gt; <span class="number">0</span> &amp;&amp; mm[i] == mm[i<span class="number">-1</span>])&#123;str.erase(<span class="number">10</span>, <span class="number">2</span>);<span class="keyword">continue</span>;&#125;<span class="comment">//判重</span></span><br><span class="line">                            <span class="keyword">if</span>(DD[k] == <span class="string">&quot;31&quot;</span> &amp;&amp; (MM[l] == <span class="string">&quot;04&quot;</span> || MM[l] == <span class="string">&quot;06&quot;</span> || MM[l] == <span class="string">&quot;09&quot;</span> || MM[l] == <span class="string">&quot;11&quot;</span> || MM[l] == <span class="string">&quot;02&quot;</span>))&#123;str.erase(<span class="number">10</span>, <span class="number">2</span>);<span class="keyword">continue</span>;&#125;<span class="comment">//去掉非法日期</span></span><br><span class="line">                            <span class="keyword">if</span>(MM[l] == <span class="string">&quot;02&quot;</span> &amp;&amp; (DD[k] == <span class="string">&quot;30&quot;</span> || (DD[k] == <span class="string">&quot;29&quot;</span> &amp;&amp; !luyear(y))))&#123;str.erase(<span class="number">10</span>, <span class="number">2</span>);<span class="keyword">continue</span>;&#125;</span><br><span class="line">                            str = itos(y) + MM[l] + DD[k] +  hh[j]+ mm[i] + <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">                            <span class="keyword">if</span>(str &lt; sttime.substr(<span class="number">0</span>, <span class="number">12</span>) || str &gt;= edtime.substr(<span class="number">0</span>, <span class="number">12</span>))&#123;str.erase(<span class="number">10</span>, <span class="number">2</span>);<span class="keyword">continue</span>;&#125; <span class="comment">//判断范围</span></span><br><span class="line">                            <span class="keyword">int</span> gwed = getWeekday(str);</span><br><span class="line">                            <span class="built_in">string</span> sgwed = itos(gwed);</span><br><span class="line">                            <span class="keyword">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line">                            <span class="keyword">for</span>(<span class="keyword">int</span> m = <span class="number">0</span>; m &lt; Wek.<span class="built_in">size</span>(); m++)&#123;<span class="comment">//判断合法星期</span></span><br><span class="line">                                <span class="keyword">if</span>(Wek[m] == sgwed)flag = <span class="literal">true</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">if</span>(flag == <span class="literal">false</span>)&#123;str.erase(<span class="number">10</span>, <span class="number">2</span>);<span class="keyword">continue</span>;&#125;</span><br><span class="line">                            Ans now;</span><br><span class="line">                            now.time = str, now.work = work;ans.push_back(now);</span><br><span class="line">                            str.erase(<span class="number">10</span>, <span class="number">2</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                        str.erase(<span class="number">8</span>, <span class="number">2</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    str.erase(<span class="number">6</span>, <span class="number">2</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                str.erase(<span class="number">4</span>, <span class="number">2</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            str = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"> </span><br><span class="line">    Order(<span class="built_in">string</span> a, <span class="built_in">string</span> b, <span class="built_in">string</span> c, <span class="built_in">string</span> d, <span class="built_in">string</span> e, <span class="built_in">string</span> f)<span class="comment">//构造函数直接调用</span></span><br><span class="line">    &#123;</span><br><span class="line">        init();</span><br><span class="line">        work = f;</span><br><span class="line">        convMin(a);</span><br><span class="line">        convHour(b);</span><br><span class="line">        convDay(c);</span><br><span class="line">        convMon(d);</span><br><span class="line">        convWek(e);</span><br><span class="line">        getAns();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ans.<span class="built_in">clear</span>();</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;sttime&gt;&gt;edtime;</span><br><span class="line">    <span class="built_in">string</span> a, b, c, d, e, w;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b&gt;&gt;c&gt;&gt;d&gt;&gt;e&gt;&gt;w;</span><br><span class="line">        Order *ord = <span class="keyword">new</span> Order(a, b, c, d, e, w);</span><br><span class="line">    &#125;</span><br><span class="line">    sort(ans.<span class="built_in">begin</span>(), ans.<span class="built_in">end</span>(), cmp);<span class="comment">//给所有合法指令集按时间排序。</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ans.<span class="built_in">size</span>(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;ans[i].time&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;ans[i].work&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>acm</category>
      </categories>
      <tags>
        <tag>acm</tag>
        <tag>csp</tag>
      </tags>
  </entry>
  <entry>
    <title>csp 201712-2 游戏 暴力，附：约瑟夫环的递推</title>
    <url>/acm/csp%20201712-4%20%E8%A1%8C%E8%BD%A6%E8%B7%AF%E7%BA%BF%20spfa+%E5%89%AA%E6%9E%9D/</url>
    <content><![CDATA[<p><a href="http://118.190.20.162/view.page?gpid=T65">题目链接</a><br>题目描述：有一n点(500)m边(1e5)的图，有两种路，每个路有距离，走大路疲劳度+d(1e5)，走小路疲劳度+连续走的小路长度的平方。求从1到n最小的疲劳度。（答案不超过1e6）</p>
<span id="more"></span>
<p>努力了一番终于满分了=w=<br>提醒大家在交任何题之前一定要从头到尾检查一遍数据范围会不会爆。<br>还有输出条件的一些限制细节。<br>另外对于csp这种不实时返回结果的题来说，spfa这种玄学复杂度的算法一定要能剪枝就剪枝。</p>
<p>核心思想：</p>
<p>1.如果全是大路可以直接dijkstra，看到求连续走的小路长度和很多人是不是懵了。但是解法很简单。假设现在准备走一条从i到j的小路，长度dij，i点原来的距离Di, 连续走的小路长度为Li，Di包含了Li^2，</p>
<p>因此Dj = Di - Li^2 + (Li+dij)^2或者可以把平方式展开，Dj = Di + dij^2 + 2<em>dij</em>Li（我用的这种）</p>
<p>所以使用spfa搜索时，需要记录的是三元组(id, len, lazy)（下个点标号，距离，当前连续小路长度），在转移时</p>
<pre><code>    a)转移到大路，(nextid, len+dij, 0)

    b)转移到小路，(nextid, len+2*dij*li + dij^2, lazy+dij)
</code></pre>
<p>2.然后存图用vector数组，存(id, dis, type)（编号，路径长度，路径类型）。因为我使用了优先队列做spfa（会被大佬批评），然后自定义排序dis从小到大（cmp要反着写），这样只要访问到n点一定是答案。</p>
<p>3.优化和剪枝：</p>
<p>3.1采用类似dijkstra算法类似的visit数组，初始化为1e6。但是dijkstra的visit是用来防止多次入队的，SPFA用来松弛，我们这是用来剪枝的。如果一条大路一条小路到达同一个点路径长相等，选择大路走一定是对的。所以用大路更新visit最大值，如果某时刻路径长大于visit直接跳过。如果到达i点是一条大路，判断是否要更新visit，如果到达的是小路则不可以更新visit。把从当前点出发的三元组放进队列前，可以用visit和1e6剪枝，判断这个三元组是否应该直接跳过。<em>此处有坑，因为dij的平方和dij</em>Li可能会爆int，因此需要时刻先卡住1e6再卡住visit。</p>
<p>3.2看了看数据范围，发现不能保证图中没有自环和重边。自环要判断一下（不判断不会超时）。最开始我为了避免往queue里放太多元素导致插入排序超时或者爆内存，读完图以后给vector按dis从小到大排了个序，然后发现排序反而比不排慢，不要排了。虽然用map存每对点大路小路两条长度最小的边也是很好的，但是写着太麻烦了。</p>
<p>代码：（cmp的注释颜色很有趣）</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int, int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> piii pair<span class="meta-string">&lt;int, pii&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">505</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;piii&gt;path[MAXN];<span class="comment">//point, dis, type;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">cmp</span>//<span class="title">queue</span>用的<span class="title">cmp</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">operator</span> <span class="params">()</span> <span class="params">(piii a, piii b)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a.second.first &gt; b.second.first;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp0</span><span class="params">(piii a, piii b)</span><span class="comment">//sort用的cmp0</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.second.first &lt; b.second.first;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">priority_queue</span>&lt;piii, <span class="built_in">vector</span>&lt;piii &gt;, cmp&gt;q;<span class="comment">//point, dis, lazy</span></span><br><span class="line"><span class="keyword">int</span> visit[MAXN];</span><br><span class="line"><span class="function">piii <span class="title">mpp</span> <span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> c)</span><span class="comment">//pair&lt;int, pair&lt;int, int&gt; &gt;的make_pair函数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    pii x = mp(b, c);</span><br><span class="line">    piii xx = mp(a, x);</span><br><span class="line">    <span class="keyword">return</span> xx;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">int</span> a, b, s, t;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d %d&quot;</span>, &amp;t, &amp;a, &amp;b, &amp;s);</span><br><span class="line">        a--;<span class="comment">//此题可用0存边</span></span><br><span class="line">        b--;</span><br><span class="line">        <span class="keyword">if</span>(a == b)<span class="keyword">continue</span>;<span class="comment">//去掉自环</span></span><br><span class="line">        path[a].pb(mpp(b, s, t));</span><br><span class="line">        path[b].pb(mpp(a, s, t));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        visit[i] = <span class="number">1000001</span>;</span><br><span class="line">        <span class="comment">//sort(path[i].begin(), path[i].end(), cmp0);//优化</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> nextp, nextd, nextt;</span><br><span class="line">    visit[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; path[<span class="number">0</span>].<span class="built_in">size</span>(); i++)<span class="comment">//第一次入队</span></span><br><span class="line">    &#123;</span><br><span class="line">        nextp = path[<span class="number">0</span>][i].first;</span><br><span class="line">        nextd = path[<span class="number">0</span>][i].second.first;</span><br><span class="line">        nextt = path[<span class="number">0</span>][i].second.second;</span><br><span class="line">        <span class="keyword">if</span>(nextt == <span class="number">0</span> &amp;&amp; visit[nextp] &gt; nextd)&#123;<span class="comment">//visit剪枝+更新visit</span></span><br><span class="line">            q.push(mpp(nextp, nextd, <span class="number">0</span>));</span><br><span class="line">            visit[nextp] = nextd;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(nextt == <span class="number">1</span> &amp;&amp; nextd &lt;= <span class="number">1000</span> &amp;&amp; visit[nextp] &gt; nextd * nextd)&#123; <span class="comment">//爆1e6剪枝和visit剪枝</span></span><br><span class="line">            q.push(mpp(nextp, nextd*nextd, nextd));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(!q.empty())<span class="comment">//开始搜索</span></span><br><span class="line">    &#123;</span><br><span class="line">        piii pnow = q.top();<span class="comment">//当前访问点</span></span><br><span class="line">        q.pop();</span><br><span class="line">        <span class="keyword">int</span> idx = pnow.first;</span><br><span class="line">        <span class="keyword">int</span> lenx = pnow.second.first;</span><br><span class="line">        <span class="keyword">int</span> lazx = pnow.second.second;</span><br><span class="line">        <span class="keyword">if</span>(lenx &gt; <span class="number">1000000</span>)<span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span>(lenx &gt; visit[idx])<span class="keyword">continue</span>;<span class="comment">//visit剪枝</span></span><br><span class="line">        <span class="keyword">if</span>(idx == n<span class="number">-1</span>)&#123;<span class="comment">//ans</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, pnow.second.first);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; path[idx].<span class="built_in">size</span>(); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            nextp = path[idx][i].first;</span><br><span class="line">            nextd = path[idx][i].second.first;</span><br><span class="line">            nextt = path[idx][i].second.second;</span><br><span class="line">            <span class="keyword">if</span>(nextt == <span class="number">0</span>)&#123; <span class="comment">//大路visit剪枝+更新+更新visit</span></span><br><span class="line">                <span class="keyword">if</span>(visit[nextp] &lt; nextd + lenx)<span class="keyword">continue</span>;</span><br><span class="line">                q.push(mpp(nextp, nextd + lenx, <span class="number">0</span>));</span><br><span class="line">                visit[nextp] = nextd + lenx;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(nextt == <span class="number">1</span>)&#123;<span class="comment">//小路判断爆1e6(注意爆int)+visit剪枝+更新</span></span><br><span class="line">                <span class="keyword">double</span> sum = (<span class="keyword">double</span>)nextd * (<span class="keyword">double</span>)nextd + (<span class="keyword">double</span>)lenx + <span class="number">2</span> * (<span class="keyword">double</span>)lazx * (<span class="keyword">double</span>)nextd;</span><br><span class="line">                <span class="keyword">if</span>(sum &gt; <span class="number">1000000</span>)<span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(visit[nextp] &lt; nextd * nextd + lenx + <span class="number">2</span> * lazx * nextd)<span class="keyword">continue</span>;</span><br><span class="line">                q.push(mpp(nextp, nextd * nextd + lenx + <span class="number">2</span> * lazx * nextd, lazx + nextd));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>acm</category>
      </categories>
      <tags>
        <tag>acm</tag>
        <tag>csp</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode刷题规则</title>
    <url>/acm/leetcode%E8%A7%84%E5%88%99/</url>
    <content><![CDATA[<h1 id="Leetcode-刷题规则"><a href="#Leetcode-刷题规则" class="headerlink" title="Leetcode 刷题规则"></a>Leetcode 刷题规则</h1><p>规则：  </p>
<ul>
<li>stdout可以输出，但stdout可能造成误判。</li>
<li>不需要调用包，所有包都可以直接使用。</li>
<li>如果运行样例与测试结果不同，注意<strong>memset</strong>，注意<strong>清零</strong>，注意<strong>初始化</strong>，注意不要有<strong>全局变量</strong>。</li>
<li>不要<strong>读错题</strong>。  </li>
<li>注意<strong>合理的下标名</strong>，注意尽量不要用可能是<strong>关键字</strong>的变量名。  <span id="more"></span></li>
</ul>
]]></content>
      <categories>
        <category>acm</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>201803-4 棋局评估 min-max搜索</title>
    <url>/acm/csp%20201803-4%20%E6%A3%8B%E5%B1%80%E8%AF%84%E4%BC%B0%20min-max%E6%90%9C%E7%B4%A2/</url>
    <content><![CDATA[<p><a href="http://118.190.20.162/submitlist.page?gpid=T70">题目链接</a></p>
<p>题意：井字棋，现在放了某些棋子。连成线的时候得分为(空格子数+1)（B赢*-1）问当前棋局中，如果Alice和Bob都按最优策略下棋，最终得分。</p>
<span id="more"></span>
<p>思路：典型的min-max对抗搜索，A选取分数最高的一种走法，B选取分数最低的一种走法。</p>
<p>注意的是dfs返回值的初始化问题，min搜索初始值不一定小于0， max初始值不一定大于0（因为这个愚蠢的错了好几回）。</p>
<p>代码：</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> graph[<span class="number">5</span>][<span class="number">5</span>];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">judge</span><span class="params">()</span><span class="comment">//是否结束，返回赢家</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)<span class="keyword">if</span>(graph[<span class="number">0</span>][i] != <span class="number">0</span> &amp;&amp; graph[<span class="number">0</span>][i] == graph[<span class="number">1</span>][i] &amp;&amp; graph[<span class="number">2</span>][i] == graph[<span class="number">0</span>][i])<span class="keyword">return</span> graph[<span class="number">0</span>][i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)<span class="keyword">if</span>(graph[i][<span class="number">0</span>] != <span class="number">0</span> &amp;&amp; graph[i][<span class="number">0</span>] == graph[i][<span class="number">1</span>] &amp;&amp; graph[i][<span class="number">2</span>] == graph[i][<span class="number">0</span>])<span class="keyword">return</span> graph[i][<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">if</span>(graph[<span class="number">0</span>][<span class="number">0</span>] != <span class="number">0</span> &amp;&amp; graph[<span class="number">0</span>][<span class="number">0</span>] == graph[<span class="number">1</span>][<span class="number">1</span>] &amp;&amp; graph[<span class="number">0</span>][<span class="number">0</span>] == graph[<span class="number">2</span>][<span class="number">2</span>])<span class="keyword">return</span> graph[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">if</span>(graph[<span class="number">2</span>][<span class="number">0</span>] != <span class="number">0</span> &amp;&amp; graph[<span class="number">2</span>][<span class="number">0</span>] == graph[<span class="number">1</span>][<span class="number">1</span>] &amp;&amp; graph[<span class="number">2</span>][<span class="number">0</span>] == graph[<span class="number">0</span>][<span class="number">2</span>])<span class="keyword">return</span> graph[<span class="number">2</span>][<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getdonow</span><span class="params">()</span><span class="comment">//当前空格子数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(graph[i][j] == <span class="number">0</span>)cnt++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cnt;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> donow)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> person = donow % <span class="number">2</span>;<span class="comment">//当前操作者</span></span><br><span class="line">    <span class="keyword">if</span>(person == <span class="number">0</span>)person = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(judge() != <span class="number">0</span>)<span class="keyword">return</span> person == <span class="number">2</span>? donow+<span class="number">1</span> : -donow<span class="number">-1</span>;<span class="comment">//此时已结束，有赢家</span></span><br><span class="line">    <span class="keyword">if</span>(donow == <span class="number">0</span>)<span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//此时已结束，平局</span></span><br><span class="line">    <span class="keyword">int</span> retmax = <span class="number">-100</span>, retmin = <span class="number">100</span>;<span class="comment">//完全可以合成一个写</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(graph[i][j] == <span class="number">0</span>)&#123;</span><br><span class="line">                graph[i][j] = person;<span class="comment">//准备下一步递归</span></span><br><span class="line">                <span class="keyword">if</span>(person == <span class="number">1</span>)retmax = <span class="built_in">max</span>(retmax, dfs(donow<span class="number">-1</span>));<span class="comment">//max</span></span><br><span class="line">                <span class="keyword">else</span> retmin = <span class="built_in">min</span>(retmin, dfs(donow<span class="number">-1</span>));<span class="comment">//min</span></span><br><span class="line">                graph[i][j] = <span class="number">0</span>;<span class="comment">//回溯</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(person == <span class="number">1</span>)<span class="keyword">return</span> retmax;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> retmin;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="keyword">int</span> flag;</span><br><span class="line">    <span class="keyword">int</span> donow;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memset</span>(graph, <span class="number">0</span>, <span class="keyword">sizeof</span>(graph));</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;graph[i][<span class="number">0</span>], &amp;graph[i][<span class="number">1</span>], &amp;graph[i][<span class="number">2</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        donow = getdonow();</span><br><span class="line">        <span class="keyword">int</span> ans = dfs(donow);</span><br><span class="line">        <span class="keyword">if</span>(ans &gt; <span class="number">0</span> &amp;&amp; ans % <span class="number">2</span> == <span class="number">0</span>)ans++;<span class="comment">//如果题目严谨，没有什么用</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(ans &lt; <span class="number">0</span> &amp;&amp; ans % <span class="number">2</span> == <span class="number">1</span>)ans --;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>acm</category>
      </categories>
      <tags>
        <tag>acm</tag>
        <tag>csp</tag>
      </tags>
  </entry>
  <entry>
    <title>ccproxy服务器代理联网</title>
    <url>/research-experiment/ccproxy%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%BB%A3%E7%90%86%E8%81%94%E7%BD%91/</url>
    <content><![CDATA[<hr>
<h1 id="1-ssh-服务器配置代理（ccproxy-linux服务器-cmd）"><a href="#1-ssh-服务器配置代理（ccproxy-linux服务器-cmd）" class="headerlink" title="1.ssh 服务器配置代理（ccproxy+linux服务器+cmd）"></a>1.ssh 服务器配置代理（ccproxy+linux服务器+cmd）</h1><p>下载ccproxy，免费版即可。</p>
<h2 id="1-1ccproxy-设置-gt-所有ip都改成本地电脑对外的ip地址（验证：ssh连接服务器，用who指令查看当前用户的ip），不放心所有服务都打开"><a href="#1-1ccproxy-设置-gt-所有ip都改成本地电脑对外的ip地址（验证：ssh连接服务器，用who指令查看当前用户的ip），不放心所有服务都打开" class="headerlink" title="1.1ccproxy: 设置-&gt;所有ip都改成本地电脑对外的ip地址（验证：ssh连接服务器，用who指令查看当前用户的ip），不放心所有服务都打开"></a>1.1ccproxy: 设置-&gt;所有ip都改成本地电脑对外的ip地址（验证：ssh连接服务器，用who指令查看当前用户的ip），不放心所有服务都打开</h2><p><img src="https://img-blog.csdnimg.cn/202002230301596.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4MzYyNzg4,size_16,color_FFFFFF,t_70" alt="1"></p>
<h2 id="1-2ccproxy-账号-gt-添加目标服务器的ip。可改成允许部分。"><a href="#1-2ccproxy-账号-gt-添加目标服务器的ip。可改成允许部分。" class="headerlink" title="1.2ccproxy:账号-&gt;添加目标服务器的ip。可改成允许部分。"></a>1.2ccproxy:账号-&gt;添加目标服务器的ip。可改成允许部分。</h2><p><img src="https://img-blog.csdnimg.cn/20200223030244284.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4MzYyNzg4,size_16,color_FFFFFF,t_70" alt="2"></p>
<h2 id="1-3-服务器：主页面（home-）-profile，后面追加三行地址（-等号前后无空格）：（ip用和ccproxy一样的，图是以前配置的）"><a href="#1-3-服务器：主页面（home-）-profile，后面追加三行地址（-等号前后无空格）：（ip用和ccproxy一样的，图是以前配置的）" class="headerlink" title="1.3.服务器：主页面（home/）/.profile，后面追加三行地址（*等号前后无空格）：（ip用和ccproxy一样的，图是以前配置的）"></a>1.3.服务器：主页面（home/<usrname>）/.profile，后面追加三行地址（*等号前后无空格）：（ip用和ccproxy一样的，图是以前配置的）</usrname></h2><p><img src="https://img-blog.csdnimg.cn/20200223030504228.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4MzYyNzg4,size_16,color_FFFFFF,t_70" alt="3"></p>
<h2 id="1-4-服务器cmd"><a href="#1-4-服务器cmd" class="headerlink" title="1.4 服务器cmd:"></a>1.4 服务器cmd:</h2><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">source</span> ~/.<span class="keyword">profile</span> </span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure>
<p>可以在服务器试图下载，看ccproxy会不会出现进度条，以及若连接错误时请求的ip是否正确，再修改和重启尝试等等。</p>
<hr>
]]></content>
      <categories>
        <category>实验</category>
        <category>python</category>
        <category>linux</category>
      </categories>
      <tags>
        <tag>ccproxy</tag>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>windows10锁屏背景的位置-无需更换文件格式-方便保存</title>
    <url>/research-experiment/pycharm%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
    <content><![CDATA[<hr>
<p>1.pycharm查看函数：ctrl+鼠标点击</p>
<p>2.pycharm全项目搜素：ctrl+shift+f</p>
<p>3.</p>
]]></content>
      <categories>
        <category>实验</category>
        <category>pycharm</category>
      </categories>
      <tags>
        <tag>pycharm</tag>
      </tags>
  </entry>
  <entry>
    <title>python文件读写相关</title>
    <url>/research-experiment/python%20IO/</url>
    <content><![CDATA[<h2 id="shutil"><a href="#shutil" class="headerlink" title="shutil"></a>shutil</h2><ul>
<li> 删除非空文件夹：<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">import shutil</span><br><span class="line">shutil<span class="selector-class">.rmtree</span>(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">&#x27;ok&#x27;</span>)</span></span></span><br></pre></td></tr></table></figure></li>
<li>   其他操作<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">shutil<span class="selector-class">.copyfile</span>( <span class="attribute">src</span>, dst)   #从源src复制到dst中去。 如果当前的dst已存在的话就会被覆盖掉</span><br><span class="line">shutil<span class="selector-class">.move</span>( <span class="attribute">src</span>, dst)  #移动文件或重命名</span><br><span class="line">shutil<span class="selector-class">.copymode</span>( <span class="attribute">src</span>, dst) #只是会复制其权限其他的东西是不会被复制的</span><br><span class="line">shutil<span class="selector-class">.copystat</span>( <span class="attribute">src</span>, dst) #复制权限、最后访问时间、最后修改时间</span><br><span class="line">shutil<span class="selector-class">.copy</span>( <span class="attribute">src</span>, dst)  #复制一个文件到一个文件或一个目录</span><br><span class="line">shutil<span class="selector-class">.copy2</span>( <span class="attribute">src</span>, dst)  #在copy上的基础上再复制文件最后访问时间与修改时间也复制过来了，类似于cp –p的东西</span><br><span class="line">shutil<span class="selector-class">.copy2</span>( <span class="attribute">src</span>, dst)  #如果两个位置的文件系统是一样的话相当于是rename操作，只是改名；如果是不在相同的文件系统的话就是做move操作</span><br><span class="line">shutil<span class="selector-class">.copytree</span>( olddir, newdir, True/Flase) #把olddir拷贝一份newdir，如果第<span class="number">3</span>个参数是True，则复制目录时将保持文件夹下的符号连接，如果第<span class="number">3</span>个参数是False，则将在复制的目录下生成物理副本来替代符号连接</span><br><span class="line">shutil<span class="selector-class">.rmtree</span>( <span class="attribute">src</span> )   #递归删除一个目录以及目录内的所有内容</span><br></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<h2 id="os"><a href="#os" class="headerlink" title="os"></a>os</h2><ul>
<li>   判定文件是否存在<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="built_in">os</span>.<span class="built_in">path</span>.exists(<span class="built_in">path</span>): # 存在  </span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">os</span>.<span class="built_in">path</span>.exists(<span class="built_in">path</span>):  # 不存在</span><br></pre></td></tr></table></figure></li>
<li>   创建新文件和新文件夹<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">os.mkdir(path)  <span class="comment"># 单级新文件夹</span></span><br><span class="line">os.makedirs(path) <span class="comment"># 多级文件夹</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="built_in">file</span>, &#x27;w) <span class="keyword">as</span> f:  <span class="comment"># 打开和创建新文件</span></span><br></pre></td></tr></table></figure></li>
<li>   删除文件和空文件夹<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">import <span class="built_in">os</span></span><br><span class="line"><span class="built_in">os</span>.<span class="built_in">remove</span>(<span class="built_in">path</span>)  # <span class="built_in">path</span>是文件的路径，如果这个路径是一个文件夹，则会抛出OSError的错误，这时需用用rmdir()来删除</span><br><span class="line"><span class="built_in">os</span>.rmdir(<span class="built_in">path</span>)  # <span class="built_in">path</span>是文件夹路径，注意文件夹需要时空的才能被删除</span><br><span class="line"><span class="built_in">os</span>.unlink(<span class="string">&#x27;F:\新建文本文档.txt&#x27;</span>)  # unlink的功能和<span class="built_in">remove</span>一样是删除一个文件，但是删除一个删除一个正在使用的文件会报错。</span><br></pre></td></tr></table></figure></li>
<li>   递归删除文件夹<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">import <span class="built_in">os</span></span><br><span class="line"><span class="built_in">os</span>.removedirs(<span class="built_in">path</span>)  # 递归地删除目录。如果子目录成功被删除，则将会成功删除父目录，子目录没成功删除，将抛异常。</span><br></pre></td></tr></table></figure>
<figure class="highlight xquery"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">for</span><span class="built_in"> root</span>, dirs, files <span class="keyword">in</span> os.walk(top, topdown=False):</span><br><span class="line">    <span class="keyword">for</span><span class="built_in"> name</span> <span class="keyword">in</span> files:</span><br><span class="line">        os<span class="built_in">.remove</span>(os<span class="built_in">.path</span>.join<span class="built_in">(root</span>,<span class="built_in"> name</span>))</span><br><span class="line">    <span class="keyword">for</span><span class="built_in"> name</span> <span class="keyword">in</span> dirs:</span><br><span class="line">        os.rmdir(os<span class="built_in">.path</span>.join<span class="built_in">(root</span>,<span class="built_in"> name</span>))</span><br></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<h2 id="打开文件的方式"><a href="#打开文件的方式" class="headerlink" title="打开文件的方式"></a>打开文件的方式</h2><ul>
<li>   open<figure class="highlight ldif"><table><tr><td class="code"><pre><span class="line"><span class="attribute">a</span>: 追加写</span><br><span class="line"><span class="attribute">r</span>: 只读，默认</span><br><span class="line"><span class="attribute">r+：读写，覆盖</span></span><br><span class="line"><span class="attribute">w</span>: 只写，覆盖</span><br><span class="line"><span class="attribute">w+</span>: 读写，覆盖</span><br><span class="line"><span class="attribute">a</span>: 追加</span><br><span class="line"><span class="attribute">a+：追加，可读写</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<h2 id="其他操作"><a href="#其他操作" class="headerlink" title="其他操作"></a>其他操作</h2><ul>
<li>改名文件or文件夹：<ul>
<li>   os.rename(‘name_old’, ‘name_new’)</li>
</ul>
</li>
<li>移动当前文件夹<ul>
<li>   os.chdir(‘path’)</li>
</ul>
</li>
<li>复制文件<ul>
<li>   os.copy(‘old_dir’, ‘new_dir_or_file’)</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>实验</category>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>python+ml科研经验-实验方面</title>
    <url>/research-experiment/python+ml%E5%AE%9E%E9%AA%8C%E7%BB%8F%E9%AA%8C/</url>
    <content><![CDATA[<h3 id="Main函数与Args的使用"><a href="#Main函数与Args的使用" class="headerlink" title="Main函数与Args的使用"></a>Main函数与Args的使用</h3><ul>
<li>  args全局，然后引用。在函数中直接传递。</li>
<li>  用shadow main调用main，在一个实验环境跑多份代码。注意../和./的差别</li>
<li>  在shadow main中，调用main之前修改args的个别参数，不要修改主函数</li>
<li>  产生可能使用和变化的新超参数，在args里添加，并保证初始值不变。方便修改，不要硬编码在函数中。</li>
<li>  args各个部分分开：train部分，test部分，semi-supervised部分等。尽可能用int和str代替bool，防止之后用一个变量控制新功能。</li>
<li>  print args:<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">&#x27;-----Args Items -----&#x27;</span>)</span></span></span><br><span class="line"><span class="keyword">for</span> k, v <span class="keyword">in</span> vars(self.args)<span class="selector-class">.items</span>():</span><br><span class="line">    print(<span class="string">&#x27;&#123;&#125;:&#123;&#125;&#x27;</span><span class="selector-class">.format</span>(k, v))</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">&#x27;done&#x27;</span>)</span></span></span><br></pre></td></tr></table></figure></li>
<li>  save args:<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">def save_args(<span class="built_in">self</span>):</span><br><span class="line">      model_dir = <span class="built_in">os</span>.<span class="built_in">path</span>.dirname(<span class="built_in">self</span>.args.save_dir)</span><br><span class="line">      <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">os</span>.<span class="built_in">path</span>.exists(model_dir):</span><br><span class="line">          <span class="built_in">os</span>.makedirs(model_dir)</span><br><span class="line">      filename = <span class="string">&#x27;args.csv&#x27;</span></span><br><span class="line">      args_path = <span class="built_in">os</span>.<span class="built_in">path</span>.join(model_dir, filename)</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&#x27;Save args to &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(args_path))</span><br><span class="line">      # <span class="built_in">print</span>(<span class="string">&#x27;--------Args Items----------&#x27;</span>)</span><br><span class="line">      with <span class="built_in">open</span>(args_path, <span class="string">&#x27;w&#x27;</span>) as fid:</span><br><span class="line">          <span class="keyword">for</span> k, v <span class="keyword">in</span> vars(<span class="built_in">self</span>.args).items():</span><br><span class="line">              fid.<span class="built_in">write</span>(<span class="string">&#x27;&#123;&#125;,&#123;&#125;\n&#x27;</span>.<span class="built_in">format</span>(k, v))</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="更新和迭代"><a href="#更新和迭代" class="headerlink" title="更新和迭代"></a>更新和迭代</h3><ul>
<li>  大幅度修改实验前，先把一个相对完整的版本保存下来，然后新开一个项目，可以避免混乱。</li>
</ul>
<h3 id="起名和架构规范"><a href="#起名和架构规范" class="headerlink" title="起名和架构规范"></a>起名和架构规范</h3><ul>
<li>  同类变量起名时，首字母尽可能一致，方便debug。</li>
<li>  注意命名写完整，写好help，避免混乱。</li>
<li>  output和outputs等的单复数，string和str的缩写格式统一。</li>
<li>  一个函数实现的多个分支的功能尽可能平行。</li>
<li>  initialization的多个部分的初始化函数分开</li>
<li>  train(on_start_epoch, run_iteration(on_forward, calculate_loss), on_end_epoch)</li>
<li>  尽可能保留下来更多相关信息，如当前best score， 某一个部分的result等。</li>
</ul>
<h3 id="checkpoint"><a href="#checkpoint" class="headerlink" title="checkpoint"></a>checkpoint</h3><ul>
<li>  设置多种load的方式：load_all, parameters, model_only</li>
<li>  所有的变量：变量名=checkpoint[‘变量名’]；所有的模型和优化器：model.load_state_dict(checkpoint[‘模型名’])。注意转cuda。<figure class="highlight pf"><table><tr><td class="code"><pre><span class="line"><span class="literal">self</span>.auto_alpha.load_state_dict(checkpoint[&#x27;auto_alpha_dict&#x27;])</span><br><span class="line"><span class="literal">self</span>.auto_alpha_optimizer.load_state_dict(checkpoint[&#x27;auto_alpha_optimizer&#x27;])</span><br><span class="line"><span class="keyword">for</span> <span class="keyword">state</span> <span class="keyword">in</span> <span class="literal">self</span>.auto_alpha_optimizer.<span class="keyword">state</span>.values():</span><br><span class="line">    <span class="keyword">for</span> k, v <span class="keyword">in</span> <span class="keyword">state</span>.items():</span><br><span class="line">        if torch.is_tensor(v):</span><br><span class="line">            <span class="keyword">state</span>[k] = v.cuda()</span><br><span class="line">if torch.cuda.is_available():</span><br><span class="line">    <span class="literal">self</span>.auto_alpha.cuda()</span><br></pre></td></tr></table></figure>


</li>
</ul>
]]></content>
      <categories>
        <category>实验</category>
        <category>经验</category>
        <category>机器学习</category>
      </categories>
      <tags>
        <tag>经验</tag>
      </tags>
  </entry>
  <entry>
    <title>linux服务器+pytorch实验环境配置常用命令行指令</title>
    <url>/research-experiment/python+pycharm%E5%91%BD%E4%BB%A4%E8%A1%8C/</url>
    <content><![CDATA[<hr>
<h2 id="1-激活anaconda环境：激活-环境名。"><a href="#1-激活anaconda环境：激活-环境名。" class="headerlink" title="1.激活anaconda环境：激活+环境名。"></a>1.激活anaconda环境：激活+环境名。</h2><figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">source <span class="built_in">activate</span> pytorch_wzy</span><br></pre></td></tr></table></figure>
<h2 id="2-打错名字无所谓，会给提示，命令如下，查询所有anaconda环境："><a href="#2-打错名字无所谓，会给提示，命令如下，查询所有anaconda环境：" class="headerlink" title="2.打错名字无所谓，会给提示，命令如下，查询所有anaconda环境："></a>2.打错名字无所谓，会给提示，命令如下，查询所有anaconda环境：</h2><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">conda</span> <span class="literal">info</span> --envs</span><br></pre></td></tr></table></figure>
<h2 id="3-进入某个python：直接打，如果不是的话版本号详细些，形如："><a href="#3-进入某个python：直接打，如果不是的话版本号详细些，形如：" class="headerlink" title="3.进入某个python：直接打，如果不是的话版本号详细些，形如："></a>3.进入某个python：直接打，如果不是的话版本号详细些，形如：</h2><figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">python</span> <span class="number">3</span>.<span class="number">6</span></span><br></pre></td></tr></table></figure>
<h2 id="4-退出python环境（退出其他的环境大概也适用）："><a href="#4-退出python环境（退出其他的环境大概也适用）：" class="headerlink" title="4.退出python环境（退出其他的环境大概也适用）："></a>4.退出python环境（退出其他的环境大概也适用）：</h2><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">quit</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure>
<p>或者键盘直接ctrl+D</p>
<h2 id="5-用pip安装东西：如下，安装opencv-import-cv2"><a href="#5-用pip安装东西：如下，安装opencv-import-cv2" class="headerlink" title="5.用pip安装东西：如下，安装opencv (import cv2) :"></a>5.用pip安装东西：如下，安装opencv (import cv2) :</h2><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">pip <span class="keyword">install</span> opencv-python</span><br></pre></td></tr></table></figure>
<p>举例是：opencv在pycharm中好像不能安装，否则直接用pycharm下载美滋滋。</p>
<p>*注意先进入特定的conda环境下再安装，我装了好几个opencv，然后发现装到root下了。</p>
<h2 id="6-pip自身版本更新："><a href="#6-pip自身版本更新：" class="headerlink" title="6.pip自身版本更新："></a>6.pip自身版本更新：</h2><figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">python -m pip install <span class="comment">--upgrade pip</span></span><br></pre></td></tr></table></figure>
<h2 id="7-查看GPU使用情况："><a href="#7-查看GPU使用情况：" class="headerlink" title="7.查看GPU使用情况："></a>7.查看GPU使用情况：</h2><figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">nvidia</span>-<span class="keyword">smi</span> </span><br></pre></td></tr></table></figure>
<p>更详细的有很多博客，暂时用不到。</p>
<p>实时查看：如下10秒刷新一次。该状态一直运行</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">watch</span> -n <span class="number">10</span> nvidia-smi</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="8-某些包调回旧版本：刚刚训练时遇到UserWarning-Anti-aliasing-will-be-enabled-by-default-in-skimage-0-15，查了查需要卸载新版本scikit-image"><a href="#8-某些包调回旧版本：刚刚训练时遇到UserWarning-Anti-aliasing-will-be-enabled-by-default-in-skimage-0-15，查了查需要卸载新版本scikit-image" class="headerlink" title="8.某些包调回旧版本：刚刚训练时遇到UserWarning: Anti-aliasing will be enabled by default in skimage 0.15，查了查需要卸载新版本scikit-image."></a>8.某些包调回旧版本：刚刚训练时遇到UserWarning: Anti-aliasing will be enabled by default in skimage 0.15，查了查需要卸载新版本scikit-image.</h2><figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">pip uninstall scikit-<span class="built_in">image</span></span><br></pre></td></tr></table></figure>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">pip</span> install scikit-image==<span class="number">0</span>.<span class="number">13</span>.<span class="number">0</span></span><br></pre></td></tr></table></figure>
<p>*一行一打，不要着急</p>
<h2 id="9-查看进程和kill进程"><a href="#9-查看进程和kill进程" class="headerlink" title="9.查看进程和kill进程"></a>9.查看进程和kill进程</h2><p>查看进程/查看并筛选：</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">ps -ef</span></span><br></pre></td></tr></table></figure>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ps</span> -ef|<span class="keyword">grep</span> wzy</span><br></pre></td></tr></table></figure>
<p>删除进程：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">kill</span> (ssid)</span><br></pre></td></tr></table></figure>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">kill</span> -<span class="number">9</span>强制退出</span><br></pre></td></tr></table></figure>

<h2 id="10-查看文件大小并从大到小排序："><a href="#10-查看文件大小并从大到小排序：" class="headerlink" title="10.查看文件大小并从大到小排序："></a>10.查看文件大小并从大到小排序：</h2><figure class="highlight stata"><table><tr><td class="code"><pre><span class="line">du -<span class="keyword">sh</span> * | <span class="keyword">sort</span> -nr </span><br></pre></td></tr></table></figure>
<h2 id="11-快速远程传输文件夹（linux镜像备份）："><a href="#11-快速远程传输文件夹（linux镜像备份）：" class="headerlink" title="11.快速远程传输文件夹（linux镜像备份）："></a>11.快速远程传输文件夹（linux镜像备份）：</h2><figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">rsync -av &lt;dir_path + dir_name&gt; wzy<span class="variable">@xxx</span>.xxx.xxx.xx(new_path)<span class="symbol">:&lt;new_dir_path&gt;</span></span><br></pre></td></tr></table></figure>
<p>*注意：文件夹会整个copy到新文件夹下，不要在新文件夹带文件名，会嵌套</p>
<hr>
<h2 id="12-ssh服务器命令行直接运行程序："><a href="#12-ssh服务器命令行直接运行程序：" class="headerlink" title="12.ssh服务器命令行直接运行程序："></a>12.ssh服务器命令行直接运行程序：</h2><p>激活环境，再运行程序</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">python</span> train.<span class="keyword">py</span></span><br></pre></td></tr></table></figure>
<p><strong>nohup指令</strong>：使程序关闭ssh窗口不停止运行：</p>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">nohup python train.py <span class="number">1</span>&gt;nohup_train.<span class="keyword">out</span> <span class="number">2</span>&gt;err_train.<span class="keyword">out</span></span><br></pre></td></tr></table></figure>
<p>ctrl+c不断线：后面加&amp;，和nohup可叠加使用（不推荐）</p>
]]></content>
      <categories>
        <category>实验</category>
        <category>pytorch</category>
        <category>linux</category>
        <category>命令行</category>
      </categories>
      <tags>
        <tag>windows10</tag>
      </tags>
  </entry>
  <entry>
    <title>python列表的用法</title>
    <url>/research-experiment/python%E5%88%97%E8%A1%A8/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>实验</category>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>容器</tag>
      </tags>
  </entry>
  <entry>
    <title>python基于PIL的图片编辑</title>
    <url>/research-experiment/python%E5%8F%AF%E8%A7%86%E5%8C%96-PIL%E6%A8%A1%E5%9D%97/</url>
    <content><![CDATA[<p>示例</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image, ImageDraw, ImageFont</span><br><span class="line"></span><br><span class="line">bk_img = Image.<span class="keyword">open</span>(os.path.<span class="keyword">join</span>(path_image, <span class="string">&#x27;&#123;&#125;.jpg&#x27;</span>.format(path_u[i]))) # <span class="keyword">open</span> an image</span><br><span class="line">draw = ImageDraw.Draw(bk_img) # <span class="keyword">prepare</span> <span class="keyword">to</span> draw <span class="keyword">on</span> it</span><br><span class="line">draw.text((<span class="number">10</span>, <span class="number">30</span>), &quot;epoch:&#123;&#125;&quot;.format(self.epoch), fill=(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>)) # <span class="number">10</span>列<span class="number">30</span>行，内容，fill=字体颜色</span><br><span class="line">draw.text((<span class="number">10</span>, <span class="number">60</span>), &quot;predict:&#123;&#125;&quot;.format(w_list), fill=(<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>))</span><br><span class="line">draw.text((<span class="number">10</span>, <span class="number">110</span>), &quot;gt:&#123;&#125;&quot;.format(gt_list), fill=(<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>))</span><br><span class="line"></span><br><span class="line">now_out_path = os.path.<span class="keyword">join</span>(self.args.save_dir, <span class="string">&#x27;wrong_prediction_best&#x27;</span>, <span class="string">&#x27;&#123;&#125;jpg&#x27;</span>.format(path_u[i])) # 输出路径</span><br><span class="line">bk_img.save(now_out_path) # 保存</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>实验</category>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>PIL</tag>
      </tags>
  </entry>
  <entry>
    <title>第一个python+ml实验的踩坑记录</title>
    <url>/research-experiment/python%E5%AE%9E%E9%AA%8C1%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<p>记下bug笔记，随时更新。</p>
<span id="more"></span>

<hr>
<p>1.jpg的图片读入三通道，.bmp读入单通道。不知道是不是所有的，反正我看到的这个dataset是的。</p>
<p>三通道转一通道方法可能很多吧，到了我这各种不好用/嫌麻烦。目前的处理方法，维度是对的imread读进来直接(0,255)的整数。但是保存图像的时候需要转换成-1~1的格式 （至于怎么弄成&lt;0的我也不知道）。</p>
<p>*更新：读取/保存图像的时候都是既可能出现(0,1)的，又可能出现(0,255)的，python碰到这两种都会自动读写，但是自己使用需要注意带适应性的转换。</p>
<p>*图像格式转化应该是我改了时间最长的bug。</p>
<p>*注意：0是黑。1、255是白。= =。</p>
<p>*做dl的时候要用0-1的。不然训练可能不好。</p>
<ul>
<li>//是整除， /如果想做float运算，除数尽量不要放整数。</li>
</ul>
<h1 id="刚刚修改，之前用的as-gray-True，跑了下不错"><a href="#刚刚修改，之前用的as-gray-True，跑了下不错" class="headerlink" title="刚刚修改，之前用的as_gray=True，跑了下不错"></a>刚刚修改，之前用的as_gray=True，跑了下不错</h1><h1 id="然后因为warning用回旧版本，发现旧版本的imread不支持"><a href="#然后因为warning用回旧版本，发现旧版本的imread不支持" class="headerlink" title="然后因为warning用回旧版本，发现旧版本的imread不支持"></a>然后因为warning用回旧版本，发现旧版本的imread不支持</h1><h1 id="希望这回不出问题"><a href="#希望这回不出问题" class="headerlink" title="希望这回不出问题"></a>希望这回不出问题</h1><p>img = imread(self._path + name + ‘.jpg’, as_grey=True)<br>        img = img.astype(np.uint8)</p>
<ul>
<li>更新：as_grey和as_gray都可能报错/报警告，取决于当前环境版本（- -），反正我换服务器的时候遇到了麻烦。</li>
</ul>
<p>2.linux环境下用os.listdir()读文件夹下的所有文件的顺序不固定。排序即可。windows有顺序。</p>
<p> if not os.path.exists(new_path):<br>        os.makedirs(new_path)<br>    files = os.listdir(new_path)<br>    files.sort()<br>    pictures = os.listdir(old_path)<br>    pictures.sort()<br>3.Dataloader+lambda在windows+cpu下好像不是很好用，建议使用linux。查了一下windows好像需要手写一大段东西。</p>
<p>运行时出现Ran out of input以及Can’t pickle local object ‘train.<locals>.<lambda>‘<br>4.遍历、用Dataset等，文件夹地址不要少写后面的/。</lambda></locals></p>
<p>更新：基本上训练的时候发现loss和acc怎么弄都不变，训练得还很快，八成是这个问题。</p>
<p>test_data = KidneyData(‘/data2/wzy/train_subset/0_100/‘, transforms=Null, mode=’train’)<br>    loader = DataLoader(test_data, batch_size=1, num_workers=1)<br>5.cv2.imshow在我用ssh连linux服务器跑程序的时候不能用。很吃惊了。X server是linux显示图像的应用程序。</p>
<p>更新：但是plt.show是可以用的。另外，root选对，pycharm可以查看远程服务器的代码。</p>
<p>cannot connect to X server<br>6.pytorch，unsample废弃的改写方法：</p>
<p>更新：需要小心谨慎，换回原版本的服务器，用新写法反而可以报错。</p>
<p>nn.functional.interpolate(…, mode=’bilinear’, align_corners=True)<br>7.pytorch.Dataset一定不要同时保存img和label的name用来遍历。因为在shuffle=True的情况下，遍历可能会出现img和label不对应的情况。</p>
<p> self._img_names = load_img_names(path)<br>        # self._lbl_names = load_label_names(path)<br>8.传参可以少一点，适当定义全局变量，大量传参和定义新数据会让网络训练变慢。函数内部调用全局变量用global。</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">import UNet</span><br><span class="line">net = <span class="constructor">UNet(<span class="params">in_shape</span>, 1)</span></span><br><span class="line">net.load<span class="constructor">_state_dict(<span class="params">torch</span>.<span class="params">load</span>(<span class="params">model_file</span>)</span>)</span><br><span class="line">initial_loss, initial_acc = <span class="keyword">val</span>(net, main_device, validate_loader)</span><br><span class="line">pre_loss, pre_acc = initial_loss, initial_acc</span><br><span class="line"># wzy, <span class="number">2019</span>/<span class="number">3</span>/<span class="number">6</span></span><br><span class="line">def get<span class="constructor">_reward(<span class="params">data</span>, <span class="params">target</span>)</span>:</span><br><span class="line">    (batch_data, batch_labels) = extend<span class="constructor">_one_image_to_batch(<span class="params">data</span>, <span class="params">target</span>, <span class="params">args</span>.<span class="params">batch_size</span>)</span></span><br><span class="line">    global pre_loss</span><br><span class="line">    global pre_acc</span><br><span class="line">    global net</span><br><span class="line">    ...</span><br><span class="line">    return</span><br></pre></td></tr></table></figure>
<p>9.resize从正方形到小矩形可能出错？待验证。</p>
<p>10.cv2.resize比skimage快很多，尽量用这个。</p>
<p>*更新：不同的函数速度也可以差很多。有点担心可以用time打一下。</p>
<figure class="highlight dos"><table><tr><td class="code"><pre><span class="line">start_time = <span class="built_in">time</span>.<span class="built_in">time</span>()</span><br><span class="line">self._take_action(action)</span><br><span class="line">end_time = <span class="built_in">time</span>.<span class="built_in">time</span>()</span><br><span class="line"><span class="built_in">print</span>(&#x27;s_take_action<span class="variable">%%%</span><span class="variable">%%%</span><span class="variable">%%%</span><span class="variable">%%%</span><span class="variable">%%%</span><span class="variable">%%%</span><span class="built_in">Time</span>:&#123;&#125;&#x27;.<span class="built_in">format</span>(end_time - start_time))</span><br></pre></td></tr></table></figure>
<p>11.常数级优化很重要，尤其是和图像和神经网络相关的操作就本身很慢，例如能少用一次val就少用一次</p>
<p>12.linux文件可以空格开头，导致读写文件找不到。（debug半天发现的，第一感觉是活久见- -）</p>
<p>13.如果import文件A.py，所有A.py全局的东西都会在import的时候自动创建对象。</p>
<p>比如网络加载和全局计算，调用类也一样。import的时候要谨慎，尽量装在类里调用类。反正注意结构。 </p>
<p>14.某些强调的东西（如image类型、size）打上注释，简洁明了不易遗忘，方便debug。</p>
<p>15.有时候没必要保证代码迁移性，除非是自己之后工作还用得到。</p>
<p>16.函数拆成小块，尽量不要大段的写在主函数里，命名尽量不要main()，便于在其他函数中调用多跑几次。</p>
<p>17.服务器vnc的代码，一个文件可以同时多次运行。但是来一个stop就不一定是哪个停了。</p>
<p>18.注意模型中所有的seed，该固定还是随机。怕重复和复现就不断修改，避免出现：随机分dataset每次结果不同 / 跑几次实验结果一模一样 的尴尬局面。</p>
<p>19.可能会修改的东西留个记录。比如 centroid_distance 应该用欧式距离还是曼哈顿距离，可以把x,y结果分别存起来。</p>
<p>20.注意内存消耗：以后绝对用不到的东西（如中间模型）就删了吧，或者用完自动删。不小心占满服务器是个很可怕的东西。</p>
<p>21.注意修改范围：如setting有3个GPU。到了文件，不要直接从setting调用，可以先在文件全局放一个now。方便修改。</p>
<p>22.（用于分割）提取mask边缘，用于多方法对比。</p>
<figure class="highlight nix"><table><tr><td class="code"><pre><span class="line">from skimage.color <span class="built_in">import</span> gray2rgb</span><br><span class="line">from skimage.feature <span class="built_in">import</span> canny</span><br><span class="line">from skimage.morphology <span class="built_in">import</span> dilation, square  <span class="comment"># 滤波器,dilation扩张白色部分压缩黑色部分。square正方形 </span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># img(0-255),想提取边缘特征的图</span></span><br><span class="line"> </span><br><span class="line"><span class="attr">rgb_img</span> = gray2rgb(img)</span><br><span class="line"><span class="attr">gt_edges</span> = canny(gt_img, <span class="attr">sigma=3)</span> <span class="comment"># 提取边缘特征。sigma是画笔粗细</span></span><br><span class="line"><span class="attr">gt_edges</span> = dilation(gt_edges, square(<span class="number">2</span>))  <span class="comment"># 或许是填充吧。。</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 反正输出是边缘白其他地方黑的图gt_edges。</span></span><br><span class="line"><span class="comment"># 以下给边缘染色，得到rgb_img.</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> <span class="attr">mode</span> == &#x27;r&#x27;:</span><br><span class="line">    rgb_img[<span class="attr">gt_edges</span> == <span class="number">1</span>, <span class="number">0</span>] = <span class="number">255</span></span><br><span class="line">    rgb_img[<span class="attr">gt_edges</span> == <span class="number">1</span>, <span class="number">1</span>] = <span class="number">0</span></span><br><span class="line">    rgb_img[<span class="attr">gt_edges</span> == <span class="number">1</span>, <span class="number">2</span>] = <span class="number">0</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 考虑 /= 255.0</span></span><br><span class="line"> </span><br><span class="line">return rgb_img</span><br></pre></td></tr></table></figure>
<p>23.数组（图像）裁剪（注意范围），注意如果只有一个：的时候位置不要错。</p>
<p> img_cropped = img[max(0, coordinate[0] - 75):min(256,coordinate[0] + 75), max(0, coordinate[1] - 75):min(256,coordinate[1] + 75)]<br>24.尽量少对result文件用reset。如果删了有用的结果，比有一些闲杂的数据问题大一些。</p>
<p>25.保存结果，对比实验的命名尽量不同，文件夹尽量相同。</p>
<ul>
<li><p>尽量用tsv（脑补）。</p>
</li>
<li><p>如果要处理结果，比如排序和筛选，变色，一定要另存为excel。</p>
</li>
</ul>
<ol start="26">
<li>format()和，os.path.join()，虽然写起来麻烦，写错的概率比+和%低一些？</li>
</ol>
<p>27.不需要规规矩矩一个一个验证、而且可能要跑多次取均值的model，可以通过预先判断筛选掉一些。（反正服务器早晚是你的，没必要不浪费，不如节省时间多跑跑好的模型）</p>
]]></content>
      <categories>
        <category>实验</category>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>ML</tag>
        <tag>计算机视觉</tag>
      </tags>
  </entry>
  <entry>
    <title>python的参数传递</title>
    <url>/research-experiment/python%E7%9A%84%E5%8F%82%E6%95%B0%E4%BC%A0%E9%80%92/</url>
    <content><![CDATA[<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">def <span class="builtin-name">add</span>(a, b):</span><br><span class="line">    a = a + b</span><br><span class="line">    return a</span><br><span class="line"> </span><br><span class="line">def add_list(a, b):</span><br><span class="line">    a = a.append(b)</span><br><span class="line">    return a</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    c = [1, 3]</span><br><span class="line">    d = [2, 4]</span><br><span class="line">    <span class="builtin-name">add</span>(c, d)</span><br><span class="line">    <span class="builtin-name">print</span>(c)</span><br><span class="line">    c = <span class="builtin-name">add</span>(c, d)</span><br><span class="line">    <span class="builtin-name">print</span>(c)</span><br><span class="line">    e = 5</span><br><span class="line">    add_list(c, e)</span><br><span class="line">    <span class="builtin-name">print</span>(c)</span><br><span class="line">    c = add_list(c, e)</span><br><span class="line">    <span class="builtin-name">print</span>(c)</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-attr">[1,3]</span></span><br><span class="line"><span class="selector-attr">[1,3,2,4]</span></span><br><span class="line"><span class="selector-attr">[1,3,2,4,5]</span></span><br><span class="line"><span class="attribute">None</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>实验</category>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>把导入的python项目正确放进pycharm</title>
    <url>/research-experiment/%E6%8A%8Apython%E9%A1%B9%E7%9B%AE%E6%94%BE%E8%BF%9Bpycharm/</url>
    <content><![CDATA[<p>载的python项目，导入之后，运行的时候不同文件都相互找不到了。改了什么，甚至不见了。怎么办呢</p>
<hr>
<p>解决方法：file-&gt;setting-&gt;project structure，这里除了项目文件列表，上面有一排mark标记<br><img src="https://img-blog.csdnimg.cn/20200223034337282.png" alt="tupian"></p>
<p>简单粗暴的解决方案：把所有文件夹和子文件夹都标成Source即可。</p>
<p>其他：如果不想在项目中看到某个文件夹，标成excluded就不见了。</p>
]]></content>
      <categories>
        <category>实验</category>
        <category>pycharm</category>
      </categories>
      <tags>
        <tag>pycharm</tag>
        <tag>python</tag>
        <tag>实验</tag>
      </tags>
  </entry>
  <entry>
    <title>pytorch tensor/numpy常用操作函数</title>
    <url>/research-experiment/pytorch%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<h1 id="1-tensor-mean"><a href="#1-tensor-mean" class="headerlink" title="1. tensor.mean()"></a>1. tensor.mean()</h1><p>取算术平均值。指定参数可以计算每一行或者 每一列的算术平均数</p>
<h1 id="2-tensor-unsqueeze-i"><a href="#2-tensor-unsqueeze-i" class="headerlink" title="2. tensor.unsqueeze(i)"></a>2. tensor.unsqueeze(i)</h1><p>在某个维度（从0开始）增加一个维度。squeeze(i)去掉某一维度</p>
<h1 id="3-numpy转tensor时的Double-Tensor-和Float-Tensor-不一致："><a href="#3-numpy转tensor时的Double-Tensor-和Float-Tensor-不一致：" class="headerlink" title="3.numpy转tensor时的Double Tensor 和Float Tensor 不一致："></a>3.numpy转tensor时的Double Tensor 和Float Tensor 不一致：</h1><p>对numpy用astype(np.float32)可以解决</p>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">RuntimeError: Expected object <span class="keyword">of</span> <span class="keyword">type</span> <span class="type">torch.DoubleTensor </span>but found <span class="keyword">type</span> <span class="type">torch.FloatTensor </span><span class="keyword">for</span> argument #<span class="number">2</span> <span class="symbol">&#x27;weight</span>&#x27;</span><br></pre></td></tr></table></figure>
<h1 id="4-numpy和tensor转换："><a href="#4-numpy和tensor转换：" class="headerlink" title="4.numpy和tensor转换："></a>4.numpy和tensor转换：</h1><p>List转numpy.array:</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">temp</span> = np.array(list) </span><br></pre></td></tr></table></figure>
<p>numpy.array转List:</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">arr</span> = temp.tolist() </span><br></pre></td></tr></table></figure>
<h1 id="5-numpy升降维："><a href="#5-numpy升降维：" class="headerlink" title="5.numpy升降维："></a>5.numpy升降维：</h1><p><a href="https://www.jianshu.com/p/fd526675c7b7">相关链接</a></p>
<p>numpy的升维<br>将(2,)变成(2,1)</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">a</span> = np<span class="selector-class">.array</span>(<span class="selector-attr">[1,2]</span>)</span><br><span class="line"><span class="selector-tag">b</span> = np<span class="selector-class">.expand_dims</span>(<span class="selector-tag">a</span>, axis=<span class="number">1</span>)</span><br><span class="line"><span class="selector-tag">a</span> = np<span class="selector-class">.array</span>(<span class="selector-attr">[[1]</span>,<span class="selector-attr">[2]</span>])</span><br><span class="line"><span class="selector-tag">b</span> = np<span class="selector-class">.squeeze</span>(a)</span><br></pre></td></tr></table></figure>


<h1 id="6-numpy数组拼接："><a href="#6-numpy数组拼接：" class="headerlink" title="6.numpy数组拼接："></a>6.numpy数组拼接：</h1><p><a href="https://blog.csdn.net/c_living/article/details/85264047">相关链接</a><br>a -&gt; 转成list(a) -&gt;  lista.extend(listb) -&gt;  a = np.array(lista)</p>
<h1 id="7-numpy数组降维："><a href="#7-numpy数组降维：" class="headerlink" title="7.numpy数组降维："></a>7.numpy数组降维：</h1><figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">np</span><span class="selector-class">.array</span>(a),<span class="selector-tag">a</span><span class="selector-class">.reshape</span>(<span class="number">2000</span>)..</span><br></pre></td></tr></table></figure>
<h1 id="8-RuntimeError-dimension-out-of-range-expected-to-be-in-range-of-1-0-but-got-1"><a href="#8-RuntimeError-dimension-out-of-range-expected-to-be-in-range-of-1-0-but-got-1" class="headerlink" title="8.RuntimeError: dimension out of range (expected to be in range of [-1, 0], but got 1)"></a>8.RuntimeError: dimension out of range (expected to be in range of [-1, 0], but got 1)</h1><p>维度不对，请查看当前tensor形状<br><a href="https://blog.csdn.net/qq_40178291/article/details/100183457">相关链接</a></p>
]]></content>
      <categories>
        <category>实验</category>
        <category>pytorch</category>
        <category>科研</category>
        <category>深度学习</category>
      </categories>
      <tags>
        <tag>pytorch</tag>
        <tag>tensor</tag>
      </tags>
  </entry>
  <entry>
    <title>python离线装包</title>
    <url>/research-experiment/%E7%A6%BB%E7%BA%BF%E4%B8%8B%E8%BD%BDpython%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<h1 id="2-离线给python环境装包"><a href="#2-离线给python环境装包" class="headerlink" title="2.离线给python环境装包"></a>2.离线给python环境装包</h1><p>下载地址：pypi / anaconda / tsinghua mirror / github</p>
<p>整体流程：查找包-&gt;找到合适版本号-&gt;下载-&gt;ssh传到服务器中anaconda 虚拟环境的pkgs文件夹-&gt;用pip或者conda安装。</p>
<h2 id="2-1查找包-gt-找到合适版本号-gt-下载"><a href="#2-1查找包-gt-找到合适版本号-gt-下载" class="headerlink" title="2.1查找包-&gt;找到合适版本号-&gt;下载"></a>2.1查找包-&gt;找到合适版本号-&gt;下载</h2><p>–主要是python版本；以及名字的细节，如request 1.0和request2 1.1这种很容易看错；</p>
<p>–安装依赖包时可以通过之前的超时请求查看依赖包所需版本；</p>
<p>–版本并不是越新越好，可能会有依赖版本不匹配，主要是大版本不一样的时候（如 1.18和1.16差别不大，但2.0就不支持）</p>
<p>–pypi找到的包一定可以用pip安装。.whl版本或者。tar.gz版本。我经过试验之后觉得.whl好用一些，不知道是否需要wheel。</p>
<p>–pypi如果只开放了最新版本的download，可以在release history找到之前的版本，点进去描述，然后再download下载。</p>
<p>–conda官网的包有缺失，能找到的都是tar.bz2版本。一般只能用conda 安装，很多小型包没问题，装起来也方便，（主要是格式与原来的包统一）。但有些大型包如tensorflow安装完是不能用的（可能我姿势不对）。</p>
<p>–tsinghua mirror等镜像网站：包特别多，全面，但是内容太多网页搜索经常卡住，另外注意不要看错名字。</p>
<p>–都没找到的从github和网上搜一定是有的，根据提示下载。</p>
<h2 id="2-2ssh上传服务器"><a href="#2-2ssh上传服务器" class="headerlink" title="2.2ssh上传服务器"></a>2.2ssh上传服务器</h2><p>–bitvise是我目前发现最好用的ssh客户端，包括ftp和cmd和远程桌面。</p>
<p>–conda环境的常用地址（没有跳过）：/usr/local/anaconda3../pkgs或/home/[usrname]/.conda/pkgs。正确的文件夹会有一系列的.tar.bz2的包。</p>
<p>–直接给python安装，找个合适的环境即可。</p>
<p>–*注意：其实并不要求把包上传到conda环境的文件夹，只不过为了看着方便。</p>
<h2 id="2-3pip-conda-安装包"><a href="#2-3pip-conda-安装包" class="headerlink" title="2.3pip/conda 安装包"></a>2.3pip/conda 安装包</h2><p>–cmd，定位到包的文件夹</p>
<p>–pip install &lt;包名，.tar.gz或者.whl要打全否则会被认为要求下载包&gt;</p>
<p>–conda install &lt;包名&gt;，(同上)。如果需要验证conda装的包能不能用，可以看pycharm等的环境是否显示此包。</p>
<p>–安装一个包是报错，可以看到缺失的依赖包，先安装依赖包。如版本错误可等待几次超时结束查看具体的request版本，核对是否下错名字，再找包。</p>
<hr>
<p>我放了一套tensorflow2.0这次下载的依赖包在下载界面，60多个包啊哈哈哈….</p>
]]></content>
      <categories>
        <category>实验</category>
        <category>python</category>
        <category>linux</category>
      </categories>
      <tags>
        <tag>ccproxy</tag>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>中期考核</title>
    <url>/research-experience/%E4%B8%AD%E6%9C%9F%E8%80%83%E6%A0%B8/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="e7b45b9fe07bef141e0e5a5ec55f29cb584719ebbca43753a060c9e37545ee3d">1f1ff6fb140e19a4a5cd54e44db8b96dae60f1c51aed54b2aba9f6a1fcc12b16285386b9ed78bd884943538926f2f76623b847d0e17848a8fd6b9294911b9636b5d237c65cc5a5b3da3607258bc3e854620fde6f7cdbebad870061e7fab2c0feca0f6b2132c416bd9b1182e981adde289623865514974d8ab48886f94489a77d024e68cc5c085a84eb7eafbc752655218a5d2bd63e9da3a0ef21a7106a15b1f1073df03b2d7bdb48201e875ac2bdd5b313cad7be86d6822e64b5abfcd78ba007b49a971fb70b2a9585ffb5b6609d1f6e44f1638b91a82d16dc40462625543bf7ddb0110f46fa7ba933a0a5990c34483689feb13a429360bfd8c7efdaee0c51313f4c7b6abe9b455d750263a4ec32311819a09aac7fb61035c36d07ddde5d26cddeddce1a81746971bde356a0cb72940aad1ebd9335d29697418e1bcf1044df03636a0c0f6bc81ec99c98c6da209dc766f2333237582733e941102e537de04fbdcc984b145b115603153d7a506b2d0643b415b8f5b9d9988d6beb9abcbce87b938751cc9d2e21821e5904bb684298a93502a36474a9174c010c3d9d972c4a3e6561be81c29a71b6c6b7773d1a387afbae991cc4159b3867006897003d6b2d2f171fafa51289cc41bd57be680d4d2fa8b2da38c1eeb839f2675805d5b0de6476c6aa1c5bb73836b5e5e73691a28a06214b12a010f9febb243ce6851e8773e86328237936445ef182250f45e4b5a4ee5e3eda7fbd35848df68490b7b4253c5dab6bcdf2536d39326c0df4e673c1190556b6579211d25588e12fe6588164a0ddfa7199bd7e50c45eb8e632830674f76e4b274d29f0ba8cd0369cb83e22b316be7bfde3070ea53277599e6c8cd995442dd49d61adbd8165c276cf92b208cf20008d37960f7569eafa5c6bf3d3a7bd91c698e52bb290dfd4487c8a787ce4697e76164c0b8986c8ad38023961b5adcac291cf7caa04515ae939be0da113a6af87308a09737fe3aafe3331707b14aecfc12af118ec15d842978b99cfa274e3fea5cb1a51e4a25ad617c1c9e8fbb2ebd7174db5b33d2ad60f16f1f25669354c7fa4dc91c4a569a83b1416c2230446bb57d9a9c8f77fb5971cccc2364eb7dc1fb74e819d440c52a73772385d47a0720ac22a98a8ac50c45a3353dda434a32aa72f2c0915170f0e7ee0aeb718667c4fd203050477796ebc3de0c172a524c116456a6aaf8773</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">联系作者获得密码</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>科研</category>
      </categories>
      <tags>
        <tag>经验</tag>
        <tag>科研</tag>
      </tags>
  </entry>
  <entry>
    <title>科研脑洞-idea</title>
    <url>/research-experience/%E8%84%91%E6%B4%9E/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="7280b82b5d1f8e59f905a7e68da620b009ac123be098ef904bfbd54d1b8efa07">1f1ff6fb140e19a4a5cd54e44db8b96dae60f1c51aed54b2aba9f6a1fcc12b16bb197bd5cec8e3946fbdb4e40c728c6a2e12aa813f867cc76a2180c0e4340a83a7627a7c043271cd503bc42bb5951add705e5c1103d6db9c0fe19c4c428564ba1bdd655d7a93ffbc179ce7b2bff3efbe92e784477f65010190a8b478a0732fc4fb7518ad47a2f6b6f4bfcae68c13cc5f1c4190563b41195e680b0ef0925211da43f7b762bc1cd008665139e248fbfc494ca689a8b68168fb2383aa153c4ee89b40e10da1c03b4fd8cef5890524d23c5041f609f37e7bc40a6b0eb1f1a31766bce24140ae05bea0140d3446080a577bb914133eef07a8d0c81d18fac6d9e1b73cda6d388421f3cf714c0c0eb2656b848a0ac6f715eed646a941154b4b82c432c478c285ce18680147b39186783d8e5f5f3ce7594d41896feccad54845c4dc2c4766182156e7900b6414b5f2f7057f6a851bf5ee15a8189bd10fe6231f746f12ff09b558ebadb6e89dba46598b21c45190eec2b3e6fa9fe95c0330cc94fa71d03cf4c2171f6c4c7efa597ff844070ddf52a70ce8e6202d9d0e38e11897308c55f81be3f9fa52f51ea4b2e5c2b9290980e44814065faff90d6c4b2658d89f8e2956</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">联系作者获得密码</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>科研</category>
        <category>机器学习</category>
      </categories>
      <tags>
        <tag>机器学习</tag>
        <tag>脑洞</tag>
      </tags>
  </entry>
  <entry>
    <title>如何读博</title>
    <url>/research-experience/%E5%A6%82%E4%BD%95%E8%AF%BB%E5%8D%9A/</url>
    <content><![CDATA[<p>读博方面的一些经验，来自网友</p>
<span id="more"></span>

<ul>
<li>  如何适应英语环境：多说英语，和不同的人聊天练习。</li>
<li>  如何处理和老板的关系：让老板知道你在干活，他们不一定对每个学生都有了解。</li>
<li>  内心感受：你没有你想象中的那么累。</li>
<li>  如何选课：处理机器学习，选一些seminar的课。但资格考试挂科率蛮高的。</li>
</ul>
<h3 id="如何选题："><a href="#如何选题：" class="headerlink" title="如何选题："></a>如何选题：</h3><p>方向的重要性大于努力。</p>
<h3 id="如何上手一个新方向："><a href="#如何上手一个新方向：" class="headerlink" title="如何上手一个新方向："></a>如何上手一个新方向：</h3><p>1.state-of-art的工作有没有开源代码，要看一看，复现pipeline。<br>2.有经验的师兄和直系前辈。<br>3.有比赛支持的方向很好，有说服力。<br>注意：相关的比赛是近一两年新开的吗？相关工作benchmark是一两年出来的吗？提升空间大吗？</p>
<h3 id="如何有impact："><a href="#如何有impact：" class="headerlink" title="如何有impact："></a>如何有impact：</h3><p>First Work：某个小方向开创性的工作。<br>Last：基本上解决了这个问题。<br>Improve：最常见，影响力不大。<br>提升空间大的方向，idea多。</p>
<h3 id="单篇paper"><a href="#单篇paper" class="headerlink" title="单篇paper:"></a>单篇paper:</h3><p>判断paper选题：<br>1.你希望做什么？<br>2.它近况如何，现有哪些limits。<br>3.哪些人正在关注？（学术界+工业界）<br>4.你的创新，以及为什么它合理？<br>5.创新点会带来多大的提高？（contribution in theory/modeling，improvement of result）<br>6.风险和回报？（如果方法不work有哪些替代的设计？可以作为paper的discussion部分）<br>7.花费？（GPU使用量、训练时长、数据存储开销）<br>8.时间？（训练时长、你每天工作花费时间，DDL前能否做好？）<br>9.哪些中间和最终结果证明你的成功。</p>
]]></content>
      <categories>
        <category>科研</category>
      </categories>
      <tags>
        <tag>经验</tag>
        <tag>科研</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo+NexT主题个人博客魔改教程集合</title>
    <url>/tricks/Hexo+next%E9%AD%94%E6%94%B9%E6%95%99%E7%A8%8B%E9%9B%86%E5%90%88/</url>
    <content><![CDATA[<p>个人博客，基于Hexo+NexT主题+github Page+域名解析。<br>搭建+魔改过程中的参考链接.<br>持续更新中..</p>
<span id="more"></span>

<h2 id="搭建教程"><a href="#搭建教程" class="headerlink" title="搭建教程"></a>搭建教程</h2><p><a href="https://blog.csdn.net/sinat_37781304/article/details/82729029">搭建教程：hexo史上最全搭建教程_网络_Fangzh的技术博客-CSDN博客</a><br><a href="https://blog.csdn.net/qq_34243930/article/details/102557949">搭建教程：用Github Pages+Hexo搭建博客之(一)搭建Github Pages+Hexo+部署到GitHub服务器 夏普通-CSDN博客</a></p>
<h2 id="官方文档"><a href="#官方文档" class="headerlink" title="官方文档"></a>官方文档</h2><p><a href="https://hexo.io/zh-cn/docs/setup">Hexo官方文档</a><br><a href="https://github.com/iissnan/hexo-theme-next">NexT主题项目</a></p>
<h2 id="魔改"><a href="#魔改" class="headerlink" title="魔改"></a>魔改</h2><p><a href="http://yearito.cn/posts/hexo-advanced-settings.html">功能</a><br><a href="http://yearito.cn/posts/hexo-theme-beautify.html">美化</a></p>
<h2 id="小工具"><a href="#小工具" class="headerlink" title="小工具"></a>小工具</h2><p><a href="https://clustrmaps.com/">ClustrMap站点访问量统计</a><br><a href="https://tholman.com/github-corners/">GithubCorner github侧边链接</a></p>
<h2 id="其他注意事项："><a href="#其他注意事项：" class="headerlink" title="其他注意事项："></a>其他注意事项：</h2><ul>
<li>   改名：zh-cn文件映射中修改</li>
<li>   运行：(我也不知道我怎么就记成了start或者starting)<figure class="highlight axapta"><table><tr><td class="code"><pre><span class="line">hexo <span class="keyword">server</span></span><br></pre></td></tr></table></figure></li>
<li>   部署：参考文档配置_config.yml，但注意和参考文献不同，branch填main而不是master<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">hexo deployment</span></span><br></pre></td></tr></table></figure></li>
<li>   更新:更新到github（第一次配置+部署后）：<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">hexo g</span></span><br><span class="line"><span class="attribute">hexo d</span></span><br></pre></td></tr></table></figure></li>
<li>  阅读全文栏<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- more --&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="腾讯云域名配置"><a href="#腾讯云域名配置" class="headerlink" title="腾讯云域名配置"></a>腾讯云域名配置</h2><p>如果域名购买自各个服务器网站，除了github上setting栏配置custom domain之外，注意在相应域名管理网站添加域名解析。<br><a href="https://blog.csdn.net/u012348774/article/details/79577333">解析:Github博客+腾讯云域名_Yan-CSDN博客</a></p>
<ul>
<li>  有一个大坑：deploy可能会使得CNAME（存储的custom domain地址）消失，所以要在本地的hexo/source（about,tags, _posts的父文件夹）人工添加一个一模一样的CNAME。（参考：腾讯云社区热心博主）</li>
</ul>
<h2 id="收藏夹"><a href="#收藏夹" class="headerlink" title="收藏夹"></a>收藏夹</h2><p>解决方案：把某一类tags/categories放在单独的导航栏中<br><a href="https://www.cnblogs.com/codebook/p/10312965.html">参考教程</a></p>
<ul>
<li>  另外，设置hide属性，隐藏某些博客不在首页出现。如果找到当时的参考教程就更新一下链接。</li>
</ul>
<h2 id="hexo-pdf"><a href="#hexo-pdf" class="headerlink" title="hexo-pdf"></a>hexo-pdf</h2><figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">npm install <span class="comment">--save hexo-pdf</span></span><br></pre></td></tr></table></figure>
<p>markdown语法</p>
<figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="xml">外部链接：</span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name">pdf</span> http://7xov2f.com1.z0.glb.clouddn.com/bash_freshman.pdf %&#125;</span></span><br><span class="line"><span class="xml">本地连接：</span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name">pdf</span> ./pdf名字.pdf %&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="加密"><a href="#加密" class="headerlink" title="加密"></a>加密</h2><p><a href="https://blog.csdn.net/qq_43701912/article/details/107018127">加密教程-csdn</a></p>
]]></content>
      <categories>
        <category>小技巧</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>NexT</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown转义字符</title>
    <url>/tricks/Markdown%E8%BD%AC%E4%B9%89%E5%AD%97%E7%AC%A6/</url>
    <content><![CDATA[<p>最近在疯狂搭建hexo+neXt博客。<br>用markdown时遇到了一些问题：转义字符怎么打？</p>
<p>找到了不错的blog链接：<br><a href="https://www.cnblogs.com/Tom-Ren/p/10234956.html">链接</a></p>
]]></content>
      <categories>
        <category>小技巧</category>
      </categories>
      <tags>
        <tag>markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP入门笔记（一） 入门操作+程序框架+基本数据类型</title>
    <url>/tricks/PHP%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<p>当年有人说，php是最好的语言。<br>就像现在python。<br>——2021年记</p>
<p>学习地址：<a href="http://www.php.cn/">PHP中文网</a></p>
<span id="more"></span>
<p>1.初学者最简单的集成工具包：phpStudy。(php+Apcha+Mysql+xxxx)</p>
<p>界面如下：<br><img src="/tricks/PHP%E5%85%A5%E9%97%A8/1.png" alt="图片1" align="center"></p>
<p>2.网页文件根目录：安装目录\phpStudy\PHPTutorial\WWW（服务器可查看）</p>
<p>运行文件方式：浏览器输入localhost/{filename}</p>
<p>推荐编译器：Notepad++/phpStorm。反正我用前一个。</p>
<p>3.语言基本框架：<?php ?></p>
<p>*PHP是嵌入html的代码段，因此一个网页可以用多段代码。</p>
<p>实例文件phpinfo用于获取版本号。<br><img src="/tricks/PHP%E5%85%A5%E9%97%A8/2.png" alt="图片2" align="center"></p>
<p>4.防止中文乱码：在php后面一行加上：header(“content-type:text/html;charset=utf-8”);//不要加多余空格</p>
<p>也可用html的方式</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">5.输出：<span class="built_in">echo</span> ***;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">6.变量定义：<span class="variable">$&#123;name&#125;</span> = ****;</span><br><span class="line"></span><br><span class="line">整型：<span class="comment">#num#为10进制，#0num#为8进制，#0xnum#为16进制。</span></span><br><span class="line"></span><br><span class="line">布尔boolean：True/False</span><br><span class="line"></span><br><span class="line">字符串：单引号/双引号/&lt;&lt;&lt;<span class="string">ABC(或其他大写字母)...（顶格）ABC</span>;</span><br><span class="line"></span><br><span class="line">      *三种表示法对比：</span><br><span class="line"></span><br><span class="line">             双引号识别转义字符（\n等），支持解析变量。<span class="variable">$name</span>[space] 或者&#123;<span class="variable">$name</span>&#125;</span><br><span class="line"></span><br><span class="line">             单引号效率高，支持<span class="string">&#x27;\和\</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">             第三种常用于字符很长的时候，功能看作双引号</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        *字符串拼接符号：（.） echo $a.$b;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">浮点数：普通定义同C语言，科学定义直接为8.5e3等</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">*var_dump()函数，参数为变量，用于取得此变量类型。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">7.转义字符：\\</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">单引号使用\&#x27;</span>。双引号直接使用‘’，且可以组合使用，双引号的字符串加单引号，单引号中变量可以解析。</span><br><span class="line"></span><br><span class="line">*\n和\t（双引号）通过在html网页查看源代码的方式对比：</span><br><span class="line"></span><br><span class="line">      \n相当于按了一个回车。</span><br><span class="line"></span><br><span class="line">      \t相当于按了一个tab。</span><br><span class="line"></span><br><span class="line">      但是两者显示到网页中都是空格的效果</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>个人主页建站攻略简述</title>
    <url>/tricks/%E4%B8%AA%E4%BA%BA%E5%BB%BA%E7%AB%99/</url>
    <content><![CDATA[<h2 id="0-github-page"><a href="#0-github-page" class="headerlink" title="0.github page"></a>0.github page</h2><p>如果只需要静态网站，可以直接以[username].github.io建立一个新项目，并在theme修改一个适合的主题。md形式的个人网站编辑起来也很方便。</p>
<h2 id="1-云服务器："><a href="#1-云服务器：" class="headerlink" title="1.云服务器："></a>1.云服务器：</h2><p>同实验室用的服务器类似，在服务器网站上买。试了一下，我这个经常连服务器跑dl的人，租一台带公网ip的服务器，用着非常舒适。远程虚拟主机不知道，据说用着比较麻烦，小厂商服务器或者虚拟主机可能会有免费的，但是实验证明有点卡。</p>
<p>个人购买：腾讯云，入门级的云服务器。（主要是我域名申请好久了，并且买完发现其带有很无脑的环境配置方法。）</p>
<p>推荐linux系统，ubuntu或者centos，别的不说，直观感受资料多比较好找。</p>
<h2 id="2-域名："><a href="#2-域名：" class="headerlink" title="2.域名："></a>2.域名：</h2><p>卖云服务器的网站一般都可以申请，不会太贵。重点是域名一般和云服务器放在一个厂商，否则转入转出有点烦。需要备案，身份证号之类的，会给邮件提示的。</p>
<h2 id="3-域名解析"><a href="#3-域名解析" class="headerlink" title="3.域名解析"></a>3.域名解析</h2><p>域名怎么关联在服务器上：域名解析，一般在云服务器的控制台操作。</p>
<h2 id="4-实验环境配置："><a href="#4-实验环境配置：" class="headerlink" title="4.实验环境配置："></a>4.实验环境配置：</h2><p>在云服务器上配置环境，使得一般用html或tomcat或php+一系列环境。</p>
<p>httpd最简单，不支持script的前提下挂最简单的html网站（如简历和博客）非常容易。<br>tomcat，比较传统的管理系统网站设计，写过XX管理系统实验的同学应该比较会。<br>php系列，比较新鲜，同时有一些现成的博客和论坛应用可以套用</p>
<h3 id="4-1html-httpd："><a href="#4-1html-httpd：" class="headerlink" title="4.1html/httpd："></a>4.1html/httpd：</h3><p>apache httpd，用yum+指令直接安装好。（忘了保存那个博客，自己找找）然后在/var/www/html目录放上index.html就能打开了。除了比较单一，不会遇到其他的乱七八糟问题。</p>
<h3 id="4-2tomcat："><a href="#4-2tomcat：" class="headerlink" title="4.2tomcat："></a>4.2tomcat：</h3><p>推荐给学过javaEE/jsp之类的管理系统同学，具体的就是跟着教程装一个jdk，装一个tomcat，简单设置，然后在提示的目录下放文件夹/项目。</p>
<h3 id="4-3php-LNMP"><a href="#4-3php-LNMP" class="headerlink" title="4.3php+LNMP:"></a>4.3php+LNMP:</h3><p>基于php语言，比较新鲜，而且有很多应用。我没学过，详细环境安装跟着腾讯云的提示，一行一行的粘贴就好了。我装db的时候遇到点问题，想着有点麻烦而且网页功能不难，就去转其他路子了。</p>
<p><a href="https://cloud.tencent.com/document/product/213/38056">https://cloud.tencent.com/document/product/213/38056</a> 腾讯云配置lnmp环境的文档。</p>
<p>基于这个环境，很多人推荐用wordpress建立博客：<a href="https://cloud.tencent.com/document/product/213/8044">https://cloud.tencent.com/document/product/213/8044</a></p>
<p>具体建立博客、论坛、网站的应用列表：<a href="https://blog.csdn.net/caoshangpa/article/details/78561806">https://blog.csdn.net/caoshangpa/article/details/78561806</a></p>
<h2 id="5-模板（针对html网站）"><a href="#5-模板（针对html网站）" class="headerlink" title="5.模板（针对html网站）"></a>5.模板（针对html网站）</h2><p>配置好环境，就可以把想要的网站可以传到网页了。但想要一个好看的个人网站，设计也很重要，尤其是对于没有html+css基础的人，从零写一个精美的网站十分困难，现成的模板已经包装好了一些配置，可以很快的解决问题。</p>
<p>个人使用：模板之家。其他类似的网站也可以，找到很多别人做的网站，感兴趣的下载下来改一改就可以用了。</p>
<p>模板修改：仔细查看html文件中的&lt;class=&gt;标签的类型，可以在css的某个文件找到它的描述。有点css文件夹打开是一长条，不太实用。另外一些是一部分定义的特有的类的描述，一般都是集合了多个配置，如版面背景、尺寸、类型、字体等等，总之看到奇怪的标签就去css文件里找，就可以自己修改细节完善模板。也有一些比较通用，在网上能查到具体的含义。</p>
<p>例如：<a href="https://blog.csdn.net/liyang_nash/article/details/81163782">https://blog.csdn.net/liyang_nash/article/details/81163782</a>  col-xs , col-sm , col-md , col-lg的解释（css一个用于排版的标签）。</p>
<h2 id="6-网页制作和发布"><a href="#6-网页制作和发布" class="headerlink" title="6.网页制作和发布"></a>6.网页制作和发布</h2><p>一个网页包含head/body/footer几部分。</p>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line">head除了<span class="params">&lt;title&gt;</span>是标签的描述之外不用管他，footer可能有copyright作者和年份。一般body是需要改动的部分。</span><br><span class="line"></span><br><span class="line">最基本的一些：<span class="params">&lt;p&gt;</span>标签。<span class="params">&lt;a href&gt;</span> ...<span class="params">&lt;/a&gt;</span>给文字加超链接。</span><br><span class="line"></span><br><span class="line"><span class="params">&lt;ul&gt;</span>带黑点的列表，<span class="params">&lt;ol&gt;</span>数字编号列表，列表中的每一项用<span class="params">&lt;li&gt;</span>包围。</span><br><span class="line"></span><br><span class="line">标题<span class="params">&lt;h1&gt;</span> <span class="params">&lt;h2&gt;</span>...。</span><br><span class="line"></span><br><span class="line"><span class="params">&lt;br&gt;</span>换行，<span class="params">&lt;hr/&gt;</span>添加分割线。</span><br><span class="line"></span><br><span class="line"><span class="symbol">http:</span><span class="comment">//ui.itcast.cn/news/20190801/11381494832.shtml 分割线</span></span><br><span class="line"></span><br><span class="line"><span class="symbol">http:</span><span class="comment">//www.divcss5.com/html/h323.shtml 常用标签元素</span></span><br></pre></td></tr></table></figure>
<p>总之，各个标签怎么用，细节怎么写，参考别人的主页，简单的网站，以及已经做好的模板的源代码，是最容易解决的。</p>
<h2 id="7-备案"><a href="#7-备案" class="headerlink" title="7.备案"></a>7.备案</h2><p>首先拿到域名、拿到服务器都需要备案，身份证+人脸识别视频（白背景+正规衣服）+网站名称和说明。一般没有第一次填写没有问题的，客服会打电话来教学和帮助修改。</p>
<p>网站名称和说明需要注意：有些地区不能出现姓名、博客、日记、论坛等关键词（神仙设定），说明时不能出现可能有、大概、等这类概率性的词。</p>
<p>此外，备案通过后，需要把备案号加在主页底部。这个也会有人打电话说明。</p>
<p>保持手机畅通是最重要的。</p>
<hr>
<p>搭好的个人主页：<a href="http://wintersky.xyz/index.html">http://wintersky.xyz/index.html</a></p>
<p>查资料是程序员必备的技能。</p>
]]></content>
      <categories>
        <category>小技巧</category>
      </categories>
      <tags>
        <tag>个人网站</tag>
      </tags>
  </entry>
  <entry>
    <title>windows10锁屏背景的位置-无需更换文件格式-方便保存</title>
    <url>/tricks/%E6%A1%8C%E9%9D%A2%E5%A3%81%E7%BA%B8/</url>
    <content><![CDATA[<h3 id="2021-02-24-更新：联想锁屏壁纸好用，可以直接把喜欢的壁纸保存，可以找到很多高清壁纸"><a href="#2021-02-24-更新：联想锁屏壁纸好用，可以直接把喜欢的壁纸保存，可以找到很多高清壁纸" class="headerlink" title="2021.02.24 更新：联想锁屏壁纸好用，可以直接把喜欢的壁纸保存，可以找到很多高清壁纸"></a>2021.02.24 更新：联想锁屏壁纸好用，可以直接把喜欢的壁纸保存，可以找到很多高清壁纸</h3><h2 id="window10的壁纸在哪里？"><a href="#window10的壁纸在哪里？" class="headerlink" title="window10的壁纸在哪里？"></a>window10的壁纸在哪里？</h2><p>win10的锁屏位置，网上一查全都是在这个文件夹下的一堆乱命名文件，自己修改格式为jpg</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">C</span>:\Users\%username%\AppData\Local\Packages\Microsoft.Windows.ContentDeliveryManager_cw<span class="number">5</span>n<span class="number">1</span>h<span class="number">2</span>txyewy\LocalState\Assets\</span><br></pre></td></tr></table></figure>
<p>错误：博主打开一看，这个文件夹只有一个文件，而且确实可以修改为jpg，修改完变成了看着特别小的图片，另外系统默认的四张背景也不在里面。这根本不是我想要的。虽然不能保证谁都会遇到这个问题，遇到这个问题还是需要解决方案的。</p>
<img src="/tricks/%E6%A1%8C%E9%9D%A2%E5%A3%81%E7%BA%B8/1.png" alt="图片1" align="center">

<p>而且，人们想要一张spotlight壁纸，一般都是刚刚出现过的锁屏壁纸。并不是急于找到所有可能不知道什么时候出现的壁纸。</p>
<p>所以，真正的壁纸位置，是：</p>
<figure class="highlight taggerscript"><table><tr><td class="code"><pre><span class="line">C:<span class="symbol">\W</span>indows<span class="symbol">\W</span>eb<span class="symbol">\S</span>creen</span><br></pre></td></tr></table></figure>
<p>打开看到，壁纸已经是标准大小+标准格式了，而且路径不带用户名方便敲打，而默认的几张壁纸的也不会错过了。img105.jpg就是即将出现的锁屏，100到104应该都眼熟了吧。<br><img src="/tricks/%E6%A1%8C%E9%9D%A2%E5%A3%81%E7%BA%B8/2.png" alt="图片2" align="center"></p>
<p>还有一个重要的问题：平时你看到的这个105，其实是下一次准备出现的锁屏壁纸。这是因为每次用户从锁屏界面进入时，系统自带的不知道什么xx程序会运行并把这张105换成下一次锁屏出现的图片方便使用。所以，如果不是想看下一次的锁屏，而是看上了刚刚锁屏出现过的图片，那么下手要趁早，在系统换壁纸之前把105拷走。</p>
<p>博主目前的做法是win+r，输入路径名，迅速选中壁纸并完成copy-paste操作，是很考验手速了。注意：如果没有及时paste，也可能会出现copy好了旧图片，结果paste变成了新图片。跟系统比手快哈。</p>
<p>如果想要方便一点，可以写个脚本，逻辑很简单，保存上一张img105.jpg的日期or内容等信息，通过比较就可以在每次img105.jpg更新后将其自动copy到另一个文件夹，这样就不会因为手残错过好看的壁纸咯~o(<em>￣▽￣</em>)ブ</p>
<p>代码博主没有写，如果写好了会更新（反正目前博主对自己的手速很自信o(<em>￣▽￣</em>)ブ）</p>
]]></content>
      <categories>
        <category>小技巧</category>
      </categories>
      <tags>
        <tag>windows10</tag>
      </tags>
  </entry>
  <entry>
    <title>字节跳动校园招聘内推码</title>
    <url>/shixi/1/</url>
    <content><![CDATA[<p>字节跳动校园招聘内推码：ASZ7RWS （邵帅）<br><a href="https://job.bytedance.com/campus%E5%9C%A8%E5%AD%97%E8%8A%82%E8%B7%B3%E5%8A%A8">https://job.bytedance.com/campus在字节跳动</a> 2021 校园招聘中，每人最多可投递两个职位，每个职位可选择选择服从调剂的三个城市。如果你投递的职位未被录用，HR 有可能会根据你选择的服从调剂城市，再次邀请你进入校招流程。你的申请职位及招聘进度会随之更新，请留意相关邮件及短信通知。</p>
]]></content>
      <categories>
        <category>工作</category>
        <category>暑期实习</category>
        <category>字节跳动</category>
      </categories>
      <tags>
        <tag>内推</tag>
        <tag>吉大实习群</tag>
      </tags>
  </entry>
  <entry>
    <title>腾讯优图(上海)招计算机视觉研究实习生</title>
    <url>/shixi/23/</url>
    <content><![CDATA[<p>腾讯优图实验室（上海）招计算机视觉研究实习生</p>
<p>职责:</p>
<ol>
<li>研究开发计算机视觉、深度学习、计算图形学以及相关领域的创新算法和解决方案；</li>
<li>优化算法，在腾讯各项业务中落地；</li>
<li>形成原创工作，在相关领域顶级会议/期刊发表论文；</li>
</ol>
<p>要求：</p>
<ol>
<li>CS/CE/EE及相关方向硕士/博士生；</li>
<li>熟悉计算机视觉、深度学习、计算图形学等领域；</li>
<li>对计算机视觉/机器学习某个领域有充分了解，在主流学术会议/期刊发表过相关论文，或者参加过相关竞赛并取得名次；</li>
<li>思维敏锐，能够提出有创新型的解决方案；</li>
<li>扎实的编程功底（C++/python），熟悉主流深度学习框架；<br>（pytorch/tensorflow/mxnet/caffe）；</li>
<li>实习期 3 个月以上，每周至少出勤 4 天；</li>
</ol>
<p>简历请发：<a href="mailto:&#107;&#97;&#x69;&#115;&#x65;&#x72;&#122;&#104;&#97;&#x6f;&#64;&#116;&#101;&#110;&#99;&#x65;&#x6e;&#x74;&#46;&#99;&#x6f;&#109;">&#107;&#97;&#x69;&#115;&#x65;&#x72;&#122;&#104;&#97;&#x6f;&#64;&#116;&#101;&#110;&#99;&#x65;&#x6e;&#x74;&#46;&#99;&#x6f;&#109;</a></p>
<p>邮箱主题/简历命名格式：腾讯优图实习申请+姓名+CVer推荐</p>
]]></content>
      <categories>
        <category>工作</category>
        <category>暑期实习</category>
        <category>腾讯</category>
        <category>优图</category>
      </categories>
      <tags>
        <tag>CVer</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/shixi/2/</url>
    <content><![CDATA[<p>蚂蚁集团是中国最大的移动支付平台支付宝的母公司，也是全球领先的金融科技开放平台，致力于以科技推动包括金融服务业在内的全球现代服务业的数字化升级，携手合作伙伴为消费者和小微企业提供普惠、绿色、可持续的服务，为世界带来微小而美好的改变，用科技让普通人和小企业，享受平等的金融和生活服务。<br>蚂蚁集团旗下产品包括支付宝、蚂蚁财富、芝麻信用、花呗、相互宝、余额宝、蚂蚁森林、网商银行等。</p>
<p>岗位类型<br>研发类：JAVA C/C++ 前端 客户端 数据研发等<br>安全类：安全工程师<br>算法类：机器学习 图像图形 自然语言处理等<br>设计类：创意设计师 体验设计等<br>其　它：产品 运营等</p>
<p>工作地点：杭州、上海、北京、成都、深圳、广州等<br>联系邮箱：<a href="mailto:&#121;&#105;&#x78;&#105;&#x2e;&#122;&#121;&#102;&#64;&#97;&#x6e;&#x74;&#103;&#x72;&#x6f;&#x75;&#x70;&#x2e;&#99;&#x6f;&#x6d;">&#121;&#105;&#x78;&#105;&#x2e;&#122;&#121;&#102;&#64;&#97;&#x6e;&#x74;&#103;&#x72;&#x6f;&#x75;&#x70;&#x2e;&#99;&#x6f;&#x6d;</a></p>
]]></content>
      <categories>
        <category>工作</category>
        <category>暑期实习</category>
        <category>蚂蚁</category>
      </categories>
      <tags>
        <tag>内推邮箱</tag>
        <tag>南大年级群</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/shixi/3/</url>
    <content><![CDATA[<p>阿里钉钉春招启动！不过初面不会在系统里留痕，不影响投别的部门，加群答疑~</p>
]]></content>
      <categories>
        <category>工作</category>
        <category>暑期实习</category>
        <category>阿里</category>
        <category>钉钉</category>
      </categories>
  </entry>
  <entry>
    <title></title>
    <url>/shixi/24/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>工作</category>
        <category>暑期实习</category>
      </categories>
  </entry>
  <entry>
    <title>阿里技术风险部</title>
    <url>/shixi/4/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>工作</category>
        <category>暑期实习</category>
        <category>阿里</category>
        <category>技术风险部门</category>
      </categories>
  </entry>
  <entry>
    <title>阿里云</title>
    <url>/shixi/5/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>工作</category>
        <category>暑期实习</category>
        <category>阿里</category>
        <category>阿里云</category>
      </categories>
  </entry>
  <entry>
    <title></title>
    <url>/shixi/%E6%A8%A1%E6%9D%BF/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>工作</category>
        <category>暑期实习</category>
      </categories>
  </entry>
  <entry>
    <title>人生目标分析</title>
    <url>/dailylife-notes/goals/%E4%BA%BA%E7%94%9F%E7%9B%AE%E6%A0%87/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="6920973892b25ceba72e40a8821bb854cdc14d6e4fba115ca3db761011afb615"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">联系作者获得密码</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>notes</category>
        <category>goals</category>
      </categories>
  </entry>
  <entry>
    <title>出国需要的部分</title>
    <url>/dailylife-notes/goals/%E5%87%BA%E5%9B%BD%E9%9C%80%E6%B1%82/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="e43f5dd5e004f61bf545dff6975061ef687f2b122e965202f9409f36931412d1">1f1ff6fb140e19a4a5cd54e44db8b96d09dd131e7121b8a73d898b7a206ad3e33e237a1e73072aa9612e4024528f33f4bb4895ccdf9ea6eaaf1559aac448834710fa1201a6eacf645499bcd5bac9900519ec92356b27a487bda3fdda2c65304896e73856abf4fbf26963ae3dffc5b4b20963a10a274baf148806f96ae181f6b737f7d375f8278394245ea2888d36638c3026744cf055ff954f85480d9d970b9b9eaf61d59cf34d07df9169891e76db0695a5ffccfa388e76ae14c37b25dc1c9b9f0b83c6691f28e3b3ffc87eac02a3b99399ee8217feb613abba030cb304c9637fac298dec730c39fcaa7275c2b764580809e90d4bbb3cf399b2c586834d3848bb1be5abf36b1207e3af311b2ff6aad0a126b91034fb0798647b617e36a50f9b2cc09c710716109cc20c23822ef4eda5ac8849a4f8762ac1f8b8b2f636f4a9c9ae384a8695c43faf1a08f8ee9cf4c001852c64e67b6f9a67f38afacb3cd9a574b75c0a17267bcc914225e940cc268c1e8bda1e36a708c3b896712df22060a452c4be89670350049f7108f285e3e2b59523c8166b09714c2af844f912af3a9506f34ad78d06082685728e6c72744556bef442c2a098e8245fed2bdfdd628407ecf3f7e104d76645863850a756e236b4f56dd74c1fe98929f888f533ab421a828578b257cd9484622fe4970051ea4b085ad21f91b4f7896030e66a2401b65d9eaebe13e951802521f9a4020898762300ff95f03e8a3e6ca6c3aa0621a1521f2e1002323da01b722f109f074358f1eba843fc47e192a56d6aef2caca421b47a4e2cf86a7569f00b48dc7287e932c3b75c0ddece61f5b98dc2dad5ec05c5dee7d582a9299afb8f35e438e2300ad69879b2309b32e9c35be2231d128133e1933f150e72f62ac5193f0139dda6b103921133900b474670d1ab9044926b61821a19bc074c3812bb210a16629745b4e9cb1f8cb95bdedc10f39199fbfcfad25c6d1153045e5d37037fa80ed6271f384242069d0e6f086eb82fa40eefbc3c3c52eedad3fe132e30a7819408e93b92ba43ae5172bc13bbd08c25023c35f73804e35032826967a54e3009fb9f1ab64b1912e8cd602000150febde7d0229343d5f8b219538c4bfb2119d04055f7afaaefb207b261b2ac979c51deae976a6a61e13c1fd6a1795f6ba0dffe1dc2d122a5579c31069c2efecde9ef979816f9902a834f82dd48ff655244e0fb358eaf60acfa785073e421a6bc55c5e586592efcdbc5daffa584964e10708cbf1f3a685482bb8eb7a39ea226e5a46cf7498161a79c6043c13e83f4ddd945f6faeea65168fd1c4ff66d25fa86f11e5c1be37e4c4ef1f708394e3ba4ae2e16f7dc8ccec43c55523484fa35fc52210c8f3a99aa8190debd0c5e6d65018a06b2884cae1113859f6a7a593a36cdfd067f0caa070b56d4f11899e74057321debf22607921fc633d865283d3c88b26ee3517d862e1fdadf1df8eb50cc2eded23b9a4bf6a96a1234873185c7c8d37fef442c177eba4e328818eb732efc1004ba088e87a8da84f4e16f4ded88a4cf00ead74efc0d0174fe93693e4ad21d3a271c1a39a2b2d3e7ffd329d35ff165901d2004abde296ff44dc4bb05a348df2479ff8b191fddc0a58b66f161fcac777ad8803a6c42ee0af0c08e37b75cdd4d880d563c33fd40116dcc20742592487bf4b243e1bb80b0f666786ecbda00d455048bbe6d1935bad2be8e3e9504e264b299e22d761782c0be44d1383799dd3e863b52a4569e1b3c1bf1ae35f42bf1f251c7111339a1dcf4929afbe53df8a2b5575dac94c35eb6613c51a56f67111f80970379d2acef1bc06e6a25853b360cf755dc252</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">联系作者获得密码</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>notes</category>
        <category>goals</category>
      </categories>
  </entry>
  <entry>
    <title>喜欢的课</title>
    <url>/dailylife-notes/goals/%E5%96%9C%E6%AC%A2%E7%9A%84%E7%BD%91%E8%AF%BE/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="2e10cf87cf97dfa84a31d2d070ff17b696b8214b9f64c110f7ec8cf5deb46e56">1f1ff6fb140e19a4a5cd54e44db8b96dae60f1c51aed54b2aba9f6a1fcc12b16ab443752b341a677aa804c92e6ca455a5403450c55bde3c73c3cbdd9a71acae7d1543e8a4f55284677d45a0cd1b470428cbf3098a69db57d75487197383c4eaacf7f4cd5cc4c01fedb2a5082d025d650cfbe610ebaec63421f94e94e64200f4c57f01ae232737038a3be6d94269a36d98da3acc9a2b90e95b126b9b6264f7f02cbdf9fd1005fd5c071b655b2f03a63f1c571092408570aa7fa6009ae2089b63165f48fa2e1528803005ba93acbb601046553b2d2c706dc38cfae5b453679d42372b925e62a14008d68ec248d1786cfc5cec62c08743a192822a9cadcfd0d515d7ea1c2916283e3319dd88fd32c9101269ddcf54bfc6a977fcb72aa15c9d96ccf796e32749a5e72154f87f5eeb701df5986e2acff3404e324a8ca3ddecb7c3a17cb3923ae80b746b23fd618e4c174eb53b0ab616b4bf32dc5bf10aed698695273f0a0a4564f685642a19cbf08db3ae77850eded6d9454dbd485bb33d880104ba3035252775db57c32a73a5d78c0fe7a6e0a07f5bd85b7bf330fc2aa2c921fa0d90ed0b5afb6519992becde453926bfa5420babb08028fbb7d8cd5b82b9c411ad49ee311f2c4287fc779e7f787c9dece9c2c011f199b6ea48cf6e9524ddd537e6cfaa3460611ac72dde92a15a1560c3131a2ef21693ca445984a12ca4f2f325173267979241a3ca89fc7ac88a6a124d75684fc34d46aec49c4240e3e196c859fdc836ccf473daae64355710b601e9eb14109bd6c0f8c3c36380ec9dadd56a978bc22b0b67ca32ec17056548d202d2688131183269fbe56052271375bdd35a684415da2da5f8a5ca9725dd1242114d714e4a78e532756a6327ecbdb917a6ad4989877a308fa154e5785bf390e103b682ba85f17339d2c88265f51fd7b105470c9a921f063767df611fa52c3c6bc83f28c33</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">联系作者获得密码</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>notes</category>
        <category>goals</category>
      </categories>
  </entry>
  <entry>
    <title>软件创新</title>
    <url>/dailylife-notes/innovation/notes/</url>
    <content><![CDATA[<ul>
<li><p><a href="%E6%9C%9F%E6%9C%9B%E5%BC%80%E5%8F%91%E7%9A%84%E8%BD%AF%E4%BB%B6.md">期望开发的软件</a></p>
</li>
<li><p><a href="%E6%9C%BA%E5%99%A8%E4%BA%BA.md">机器人的结构</a></p>
</li>
<li><p><a href="%E7%90%86%E6%83%B3%E7%AC%94%E8%AE%B0%E6%9C%AC.md">理想笔记本的功能</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>notes</category>
        <category>innovation</category>
      </categories>
  </entry>
  <entry>
    <title>期望开发的软件</title>
    <url>/dailylife-notes/innovation/%E6%9C%9F%E6%9C%9B%E5%BC%80%E5%8F%91%E7%9A%84%E8%BD%AF%E4%BB%B6/</url>
    <content><![CDATA[<h3 id="我想开发的软件程序"><a href="#我想开发的软件程序" class="headerlink" title="我想开发的软件程序"></a>我想开发的软件程序</h3><ul>
<li>高级脸型身材分析：视频格式，3d建模，图像识别和分析处理。</li>
<li>高级运动减脂营：ai的运动教练，提醒，图片识别和大小分析，自然语音处理，群聊格式。</li>
<li>*想学小程序的编程，喵。</li>
<li>学习小管家（软件+嵌入式）：针对载入的教程，监督学习，可提问。对完成效果合理评估。（机器学习、自然语言理解、大数据分析、图像/语音/视频分析）</li>
<li>行动力评估系统：评价一个人的行动力、爱心等，作为一张名片。希望最终能成为社会通识。</li>
<li>懒人伙伴系统：对没有遵守规则的现象在社区进行通报批评，对长期坚持的进行表扬和奖励，分小组相互监督。</li>
<li>软件过滤器：封装一些软件的常用功能接口，过滤掉不应该使用的功能。或加群，如不按时间解锁需要支付大量金币（rmb）。</li>
<li>拍照识别神器：文字识别，然后识别题干和选项，自动分割题目，可打乱题目顺序和选项顺序进行训练</li>
</ul>
]]></content>
      <categories>
        <category>notes</category>
        <category>innovation</category>
      </categories>
  </entry>
  <entry>
    <title>理想笔记本</title>
    <url>/dailylife-notes/innovation/%E7%90%86%E6%83%B3%E7%AC%94%E8%AE%B0%E6%9C%AC/</url>
    <content><![CDATA[<h3 id="理想的笔记本"><a href="#理想的笔记本" class="headerlink" title="理想的笔记本"></a>理想的笔记本</h3><ul>
<li><p>生活日记</p>
</li>
<li><p>计划管理</p>
</li>
<li><p>paper笔记</p>
</li>
<li><p>重要通知</p>
</li>
<li><p>（课程笔记，作业笔记，学术报告）</p>
</li>
</ul>
]]></content>
      <categories>
        <category>notes</category>
        <category>innovation</category>
      </categories>
  </entry>
  <entry>
    <title>机器人</title>
    <url>/dailylife-notes/innovation/%E6%9C%BA%E5%99%A8%E4%BA%BA/</url>
    <content><![CDATA[<h3 id="机器人"><a href="#机器人" class="headerlink" title="机器人"></a>机器人</h3><ul>
<li>0.实体的机器人<br>模块：视觉导航；机械控制；联网传输信息  </li>
<li>1.AR/VR的机器人<br>AR：AR的视觉外观；立体声；  </li>
<li>2.虚拟的交互机器人<br>交互：语音识别；语音输出；面部情感分析，语音情感分析；  </li>
<li>3.聊天机器人<br>模块：情感计算，自然语言处理，智能问答；检索系统（知识图谱）  </li>
<li>4.学习模块：主动学习；强化学习；</li>
<li>5.记忆模块：人脸识别和记录；消息记录；</li>
</ul>
]]></content>
      <categories>
        <category>notes</category>
        <category>innovation</category>
      </categories>
  </entry>
  <entry>
    <title>notes</title>
    <url>/dailylife-notes/society/notes/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="3c07fcb9ddba7400e27b41d6c519f86c5f96129d25e753039d6ebc72dd736261">1f1ff6fb140e19a4a5cd54e44db8b96dae60f1c51aed54b2aba9f6a1fcc12b16704a2ff2f33367dbe0e73b7b189c8211f127fab1e9458180c606ea04028c880a28400b93570762b859ea869be8373ebb46c6b8467b9a275fbf865588411eabe7645baf0ef6f32da330de4d9ecaef14221d108bd829d94b03db9d38971572f26bf74c508d757c4e95d2fb679a5b5a174c24c7aadd97449d48296377e87e0d469c30b838456ba365c8f15e8d0231bd830ab342155747d710ef422e1cbf257e0a300323f58d0d181bb6d7465555d0c97945bf815eb0dd1e2b0ace47aa5dbecb76f90acf4e21d0c242cfb3719de66bd7fb5d57d80235d16eef8c26a228c7aa0f5a53794224901c660819929f7e3aec33452debd5781d34986baf5943c1e9eadd6380a873085fd930b51d31fb10bf46a2b9d0508adce645e332383a12d8133d2ae8559a77f1973677c77f12f47fa07c5833b0654deae67804e116817660075f12e468e9522ce17cd0fbf9ed357c55cea741d8ca142c2164d5dc6cedddc035277ad3eefea8568b57e3ac137c16760a5e341cd380061d5a2e6e97395ba8981e7e6c399b0cabb8f2692bf1bdee79e57f660fe38172d46f2690079910db5eb3a00447e50cd44a27a4a1dee35c82e2b3e8e2582b5f54810432fc8cce5d8e51cf92197fa908a1a657f9779998c5be853b5bbe8e07ddbe9a8d8d191f044919464ee4277bac8891d989b2769e5504702e35817e7342fca356aeeb2d51bee42ae0f7933eacbada45faf9050f744ef42826d9073540a4b8c9606c8facb79fcdc95ccc6e69a28b1e24c48aeeaa1fd75e594b0f9772e50cacc58ee9fd1f9ebe78982e6f825a517d56fe096ccfc4c409b554e55587192e99b47a2a618dda256f0bb25d01f828f4d2598c12bb3940afbf482a2ed7b68033a568b634359b4710bdaee5f998a1e11c00ec6be9d2d9f2243c7879423519c0e57c7f8876940740f0db8f7f2ffe1b94d150fe6c2018c5e2b64dc270b20c8ff897f737fc90570d43bffcca86607208d7a94a541adceeaae80de252b847ef9e5de2897a1f66492c71374cca81a40b92a7c320a8983eeffe62c7fcdcf5bd2d1d5a15ee0a9866bec344b2cc03cf4f5ac8955d143dd2c20a38c2f548a462cefafe0e18b07518153a1181fe63c454906bc2523b7979fc95da9184a478b674613f2e051b73e35bfe6118e06c5a1800ed1d611c6fb5642ab3ab1a1e10106b1b1c343aa42fb6bca2f0d409167c41aee336fbd53292808bf8e0815283c90d4d72702344b1ac0ed4063708abeab8273201ff8fb435509a92da3c74b40150ba373f466a2c9fd4e961a3b5568c17284c11c5263ad46c78cd4ca343dab4c70b81ac3ec8b087b8b640bae53b0f36ce99aa03100c6af229b440f655644933ef0bf68858a7ce5e20d0df8f82f365df997801fcc27449ab300146c4b517a8b5f5d93dc070fa5bc3438862edf764a55c139e300aaf83069b71be914d32017a08a06249cb3f40dd6e67add820d95cf00d67d20efd04cc8810ac4500111a412002d9344f45cd90118d45048efdeef2a992eed747b07c1af73c549241a31c3e35a4a1d6346ec3c576d31f649571</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">联系作者获得密码</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
  </entry>
  <entry>
    <title>明确人生目标</title>
    <url>/dailylife-notes/society/%E4%BA%BA%E7%94%9F%E7%9B%AE%E6%A0%87/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="16465b467a667e6d34d0e168f14734aa57d112f22428f318ac1e2c02e8a18d7a">1f1ff6fb140e19a4a5cd54e44db8b96dae60f1c51aed54b2aba9f6a1fcc12b16690a5f461ea4b02567c34352049e76f84543d17b721a0b8fd6da22f272253138bb27190ecad120cca92b7e0dfef35ea9456af07f33530631fb7a79593a3583f6cfe3af8a0111588524eff7dd9fdd28810fcf47fe26b1b7903c3f9015b33d46db0b1961328a5e1893334f986a1164adfbe373b22ffa1ec9fdbf059adeb7ccb85efc49c84a68e35144c4e6cebc5c2acd6bedd48d2b47afbf45f7befc2eb289afefc42abd5cb8b419ee4b2e4c0888a0e00e21d59272ddbe54197cc98e6f08697fab7eaa5e28543c8092f9272cb5fd17a5ed5e44a9a99fc81a3849524216292efc85898a6b6eb7f51611edd01e357f1646d2f0a0eb69e6892700c0d188a65fb3d581b4b60123484b806c92a3bffe60e733efbbcb6ae6c7ae630044506bb4558c6de22219e63c950de6fece3e2cbf4a9d993db872b78eb442fb4bdd7ac2d6457cffa901ec248907f9708de5374c8a1a83dae6b575e26a627b089db967ec5f8fba42b2c2b95d05f7f96cb14d68dc011009244ef2d6f3f6b4dfcc8b820613734dd88a4ea0acb282daf0747360982d5c287e25a3286c933102aad197fd76696cafe1d7ec8a5c076d8d9023d6e616122eefcc3967b0925f8d5f13270395c005040c781a1bc60a4bd198e32e9b1b0b31396f1cfb496acf7a2c8f333f68cbbc5f38a9010afe</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">联系作者获得密码</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>notes</category>
        <category>lifestyle</category>
      </categories>
  </entry>
  <entry>
    <title>做决定</title>
    <url>/dailylife-notes/society/%E5%81%9A%E5%86%B3%E5%AE%9A/</url>
    <content><![CDATA[<h3 id="做果断的决定"><a href="#做果断的决定" class="headerlink" title="做果断的决定"></a>做果断的决定</h3><p>决策前利弊分析，决策，执行，三阶段，彻底分离，设定期限。</p>
<ul>
<li>第一阶段只收集资料不做任何决定。</li>
<li>第二阶段前深呼吸20次以上。</li>
<li>第三阶段绝对不反悔，全心应对前进执行中出现的情况。</li>
</ul>
]]></content>
      <categories>
        <category>notes</category>
        <category>lifestyle</category>
      </categories>
  </entry>
  <entry>
    <title>家装设计</title>
    <url>/dailylife-notes/society/%E5%AE%B6%E8%A3%85%E8%AE%BE%E8%AE%A1/</url>
    <content><![CDATA[<p>家装设计图</p>
<hr>
<p>您好！感谢光临小店，<br>十五种风格实景图链接：<a href="http://pan.baidu.com/s/1o8xAXVc">http://pan.baidu.com/s/1o8xAXVc</a> 密码：h3x6   （压缩包下载地址链接：<a href="http://pan.baidu.com/s/1bCFWku">http://pan.baidu.com/s/1bCFWku</a> 密码：p8u4）<br>十五种风格实景图手机看图链接 <a href="https://share.weiyun.com/1a6d9340dd41b822445077f202689141%EF%BC%88%E5%89%8D%E4%B8%89%E4%B8%AA%E9%93%BE%E6%8E%A5%E4%B8%80%E6%A0%B7%EF%BC%8C%E6%89%8B%E6%9C%BA%E7%9C%8B%E5%9B%BE%E9%93%BE%E6%8E%A5%E6%96%B9%E4%BE%BF%E5%A4%A7%E5%AE%B6%E7%94%A8%E6%89%8B%E6%9C%BA%E8%A7%82%E7%9C%8B%E3%80%82%E5%8E%8B%E7%BC%A9%E5%8C%85%E4%B8%8B%E8%BD%BD%E9%93%BE%E6%8E%A5%E6%96%B9%E4%BE%BF%E5%A4%A7%E5%AE%B6%E4%BF%9D%E5%AD%98%E5%9C%A8%E7%BD%91%E7%9B%98">https://share.weiyun.com/1a6d9340dd41b822445077f202689141（前三个链接一样，手机看图链接方便大家用手机观看。压缩包下载链接方便大家保存在网盘</a> 或者下载带电脑）</p>
<p>2017高清效果图大全链接：<a href="http://pan.baidu.com/s/1nvn3AzR">http://pan.baidu.com/s/1nvn3AzR</a> 密码：m8xn</p>
<p>各类空间分类 链接<a href="https://share.weiyun.com/58c0a3e3158774363ba883c4ed461d8b">https://share.weiyun.com/58c0a3e3158774363ba883c4ed461d8b</a>(下载链接：<a href="http://pan.baidu.com/s/1jIqr4do">http://pan.baidu.com/s/1jIqr4do</a> 密码：n7s2）<br>记得再来哦~~^0^</p>
<hr>
]]></content>
      <categories>
        <category>notes</category>
        <category>lifestyle</category>
      </categories>
  </entry>
  <entry>
    <title>微习惯</title>
    <url>/dailylife-notes/society/%E5%BE%AE%E4%B9%A0%E6%83%AF/</url>
    <content><![CDATA[<p>不是说21天养成一个习惯吗，为什么还是很难长期坚持一个自律的习惯？</p>
<p>原因是，一个人的意志力很容易被消耗。</p>
<p>《微习惯》的作者斯蒂芬·盖斯发现，能避免意志力损耗的一种习惯是——微习惯。</p>
<p>第一，微习惯小到我们只需要用很少的意志力，就能让自己完成一件事。</p>
<p>努力程度：做一个俯卧撑、看2页书、写50个字，这些简单到不能再简单的行为，只需要非常少的努力。</p>
<p>感知难度：一旦我们开始做某件事的时候，这件事情的难度就会比想象中降低。比如我们决定开始读一页书，那我们会发现，再多读几页，也并不是难事。</p>
<p>消极情绪：如果你想玩游戏，但是规定自己每天要读一个小时，你可能会为自己失去了游戏的乐趣而不开心。但如果你用微习惯，规定自己每天只读2页书就行了，那读书的时间短到你根本感觉不到不开心。</p>
<p>主观疲劳：我们有足够的能量去做一个俯卧撑、读2页书，所以几乎不存在完不成目标的情况，也就能大大缓解主观疲劳。</p>
<p>所以，微习惯几乎不要消耗我们的意志力，就能让我们轻松完成目标任务。</p>
<p>第二，在完成为目标之后，我们很有可能会继续完成额外的环节。</p>
<p>作者斯蒂芬决定要做一个俯卧撑之后，他摆好俯卧撑的姿势，发现这和他锻炼30分钟摆的姿势一模一样。做了一个之后，他觉得反正姿势都摆好了，那就多做几个吧。</p>
<p>你看，当我们的目标是锻炼30分钟的时候，总是无法完成。但当我们决定只做一个俯卧撑的时候，反而超额完成了。</p>
<p>这一个小小的微习惯，会给我们带来继续做下去的惯性……</p>
]]></content>
      <categories>
        <category>notes</category>
        <category>lifestyle</category>
      </categories>
  </entry>
  <entry>
    <title>拒绝别人</title>
    <url>/dailylife-notes/society/%E6%8B%92%E7%BB%9D%E5%88%AB%E4%BA%BA/</url>
    <content><![CDATA[<h3 id="拒绝别人"><a href="#拒绝别人" class="headerlink" title="拒绝别人"></a>拒绝别人</h3><p>拒绝自己无法完成的事情是为别人着想，长痛不如短痛。<br>拒绝一个请求不代表拒绝一个人。<br>接受一个要求代表需要放弃一些更重要的事情。   </p>
<ul>
<li>1时间换空间法：例如邀约：可以啊，不过我好像还有另一个重要的事情，解决掉之后在来吧。</li>
<li>2对方筛选法：例如老板要求：我很喜欢，但是我手上还有a.b.c工作，您看我能不能先不做哪个工作。</li>
<li>3提供其他方案：提出其他你愿意做的事情。例如：我看xxx好像比较感兴趣。我下个月帮你可以吗。</li>
</ul>
<hr>
]]></content>
      <categories>
        <category>notes</category>
        <category>lifestyle</category>
      </categories>
  </entry>
  <entry>
    <title>时间管理</title>
    <url>/dailylife-notes/society/%E6%97%B6%E9%97%B4%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<h3 id="如何管理时间"><a href="#如何管理时间" class="headerlink" title="如何管理时间"></a>如何管理时间</h3><p>大脑会认为急迫的事情都很重要。   </p>
<ul>
<li>尤利西斯合约：当下的自己和未来不理智的自己做一个约定。   </li>
<li>常用合约：第一天晚上，写下第二天第一件事情，通常急迫不重要，放在床头。   </li>
</ul>
]]></content>
      <categories>
        <category>notes</category>
        <category>lifestyle</category>
      </categories>
  </entry>
  <entry>
    <title>清补凉</title>
    <url>/dailylife-notes/society/%E6%B8%85%E8%A1%A5%E5%87%89%E9%85%8D%E6%96%B9/</url>
    <content><![CDATA[<p>清补凉配方：<br>椰子粉，牛奶，椰果，龟苓膏，西米，薏米，大枣，红绿豆</p>
<p>西湖特级龙井一两100+，一斤1000+，50g</p>
]]></content>
      <categories>
        <category>notes</category>
        <category>lifestyle</category>
      </categories>
  </entry>
  <entry>
    <title>理财</title>
    <url>/dailylife-notes/society/%E7%90%86%E8%B4%A2/</url>
    <content><![CDATA[<p>投资理财</p>
<ul>
<li>1.50%股票基金，50%债券定期。</li>
<li>2.6个月的本金，存够完成一个月生活费的利息的钱。（我决定了保留6000本金）</li>
<li>3.把赚大钱的梦想打印贴出来，越大越好，抑制一时冲动的消费。（出国留学搞科研的动力也是同理）</li>
<li>4.知识变现/成为领域专家。假设3年后成为了专家，向用户写一个广告以推销自己，以了解自己的优势和不足。</li>
<li>5.逐渐减少收入低又耗时的工作。</li>
<li>6.资金的增长至少是抛物线型的，尽早开始，持之以恒。</li>
</ul>
]]></content>
      <categories>
        <category>notes</category>
        <category>lifestyle</category>
      </categories>
  </entry>
  <entry>
    <title>演讲</title>
    <url>/dailylife-notes/society/%E6%BC%94%E8%AE%B2/</url>
    <content><![CDATA[<h3 id="演讲"><a href="#演讲" class="headerlink" title="演讲"></a>演讲</h3><p>演讲注意两个工作的结构和关联性。</p>
<ul>
<li>再提问：我们现在解决了xx问题，那么，有一个新的问题，XXX，我们如何解决？…</li>
<li>总结：重复之前讲的问题，如：现在我们第二点讲完了/我们现在讲到xx…回到枝干。<h4 id="根枝叶果："><a href="#根枝叶果：" class="headerlink" title="根枝叶果："></a>根枝叶果：</h4>有目的，清晰的框架，生动的细节，可带走的收获。</li>
<li>可带走的收获：一个概念名，一个金句，一个重复的口号，一个画面。</li>
</ul>
]]></content>
      <categories>
        <category>notes</category>
        <category>lifestyle</category>
      </categories>
  </entry>
  <entry>
    <title>社交</title>
    <url>/dailylife-notes/society/%E7%A4%BE%E4%BA%A4/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="2d0096d122eff4d3fe1e4ac60c30dd342ad144fbcff0db7d6f30f7e27dd3c8b2">1f1ff6fb140e19a4a5cd54e44db8b96dae60f1c51aed54b2aba9f6a1fcc12b1670ed3c568f703c57c97aca2aac911017f76f563e1cdafad652c89a0a51258b951d3030b37a0caba41af06c1013813108e9e9c3252cf4b1c8f01679f640963014386cd0a7872fdf924b09edd4656428279b46b332ca7adf770b26d6b36aff59302dd1358c2e970c254beb304bd908d9fc8e44a0cafd53843cf2aa878469bac43e2762d0e22421569bd4b7796c45bca77131a22259a5b9e25746cf8ebea77a80ed6221461ea7d85ccb20e6512bb6d0b72175a225473234d16891f8995a74878e88218ca6886dde595f191b73ca752d3301b2e559ac52804b52dfd7661f35996d21a1828866641d351984876ec430252fc9b9371322c9526ed2a6218fa08691c646c9b28290e581e9f93579947df8fa555b1a6fde05eb0454e855ad849a6839a45d7c2c50f0dba4c5e14632fda40413d0ffeb25bdf97f91c9a50ab665c1404fa0e38c27cbce71121d4c5a16825c5cd1de7e62130ba2ca7a0f03a883d3d799ebbbfd12a137713a0971135501c84afc8460e4269a00bf4df4fa7dfcbb5c52dbd3d4ab04d083feb35d4ef3cd219b66d119042913ce7c7bf9937a718ac93609314a7233a20d5efa721de62caa25dd1da1fd3de6fffebefb40583f4e45265e16a607cf984605081df3c0168d8eac493854d83e4d5b3197f4f737f791f67383c90b021915858cc7655666b84c6416a83513683b554444c94bbda8ee0d989f652b2f839b57c1a861771b53c6091362708ead9adfbb6e31207ad25ff447ad62be429eccb8e77201a9712bd64f32692a51c49d06b976186bd48f859cfd5fc40cdfa7045bec7d861a9d470a2da507083b17f8a3ad1cbab9d058dbf1809556ce760caa66f748783717da9024e6a7248c5c1e288043fdc01ae5159709f662e9cdce03638051e400a91763e7c7ff4879786fbea98cb303a99953ee94608b80d4f7ac9e396f14bf5351d679d7639fe2e0ab827acf29cb1fe77d0c6b6d51fca53d7612c44f307a4356654408c72fa7f76bb0446cd527379703e1954452fef24e5126ff70b8e66f9731f57db3b4b8cb130f27694a52c3a52877dbf4a19ffbd49664887943e057dd1f7bfd6ded574e42e8e2fcbdeed8a3f2437cb16db5cccbc9cec97291119150d8f51dd7782166bb4c95f87af191eae40a988361f07ccfa8d18c588f1c155095b46f5b0488125c1eac6d3517560774b2b8ec8e77979d81c1039ceab4fb7350f817e9252f9205792cd23e7e4f96163480a9909cb76017905ba0ce87edbf95aa66c64c06f2497354c7c354a4cba96070bdf530b8b615a89daefb150cadc1d92dbf61d2edb5da291f2f2b69296cec9dbc49f485eb14540df9c206a989a620f30de14bdd2d09be4fbe06c6a5be7f8240881e29bebd573a6381698d89ec2e46365ea4e909265fb051fda3dee864235d8e20baa641cb7b693af87b60ed20a90761c051c764c255abfab2686a7f3a05ffb978cea75623095708589ddf506a44cf5556ae6312b63cab014afa8934569324f218768d1c58b81d7eee6abf64778b9f96a9df639ae37fe3ffef6abfaf8558338423944cfcbd529408922911366c9fd8837203a62293b6a64d9534b1334d438ba203d8c9319130c5df03a532c5cfaa10fc8a8f6191e5845442c9265c9265ee59a128b7952cec8f59650b39528ca342cd80abf58a68dee21e8879461c8162a0a788a9932b65121887df454de96f7bfd513f4a21348842a4d838f8f585f68eae09c440dc76bd22919624a67d5c1a23a4668ed66bfc3004678c2e327f37293340c1804aa4cc4a1474d8330fe5c16d6f46e3d88f145042111e87f62b6dffa0abef3e5eb7454ba796f91f76296a560fcb82b8625e131a54c31981fc9eb2c5fe0a5e2e0ec70b71280bb2949f2474b76c662fb7d4f91d9b497f4bbfcf23424f4012c62f21d1f056104d6ac44c2c10c877fcedab7524219184034f793b133f52128fcd056d9d6e1247180acc44a5a6d829fc582006e7a888fa6c835444240ebd30262fabe043437cf641fdb9772dc3fd97762a9b5124af2796af54fedc866e6bfbc1f42ffca9afab088eb0132d5945ceabef2935593f69f0903e5a17435cd06df6a1e6a53ec31dc83f492b4eafda5e64a75d0fd42fc245995d430dd0fd18d5e61c89937fe44964fe2974f45140ffc02d910002d954c1b30d5ce0e2a27199bfd550c3e64f340f76fbfd599a138e07e3a45b31b2c8fb25d622efb6628be4000a06f8487bce2e327cbaed432cc025aa5525fe35d0dcd4d629ac0752c526b39a709cecfc0c97bd5f156ce936231979a54378fc26cf17b16a961b70bcbb48087d98cb556b062284ed0feca1201390e838b955cc071196c1d550dff57af6fbd483f563d551f881576d50cb907a5b6ca254cf376ea02d842e11837c7480dc401e95864d92b4cd18f99e6e0d4b4ddaf179636c24eb004a22589f7a7ce14533f152c33b70ec6840e724b4e0e846ed4e58cc7bf7fc0865174c7d36cbe5e21685bce41c5eaafe3bef25a9a43d878fc90671d56788f9b9047128020505085c25da89508546a421fd470980c7b44752ab3f74830935990877048344af9ea398331ea14814c6a4a37113f6897849f428919a2b34f630afbf1fbbfc0d1a6c46c8d638913c813bad23e6124fdc0879d2f8c5d969aa9683fb2934eeb6ab41bc2564931a589106fba06daf65798c805fc129ba08e13de914187dcd8ed9d29c18f98b30f2f0bd2e69fd9f8b48b784f982a2fccbbf900ac0a5b3f7f22770432ef9d0e8dd1690e7057c766e0435527c867eb96aa2c465380e7bcdab8d2721253666423103205ef6f48d04c93fcf08111a9ee44c0de7e458c3f38f55d9f13a8a1825acd311392dee426fd89af7e6e0b0a40ef7d97251497bc9dbdc0c99578a38307719ba4b7d246e1f9dd743359ae06efd55935d28398c9ad26d1428016538d948402f3f9f6b5a23218360dff73304fe713a43881924f2dfac3f77a18024db8bf0913aa92f4a92012450e493098af5d99a12695340c237c9dd8c6017e70f68e6ef03da840a417326fead0cb249d76d98476fd83edaac00ade09a869363189f10ec03c28caa9f6b61dd4a97db68c086124447eef49ef6f520103df7d780ef7f5b627e96311df571f3e1e9e9e0bf6525495938fbf14f079d2a566b217b95b20e29375320dcd72741e0ed46113fe780e2101a148061b26c656d9dcff394d5001abfd7798dd91c8611d07be3562cacaf939ec7cb89bc85ef4e129b1ce7d17e49462d8106b4fe6e78b8abce5bf80a4cc788bd280c581ffd280b57dd564fc45ff7ed02a2a59f1d0b288aea305422db2c73be7b10d1dcd9df858614dec5b019c920c89688145fbdcfb1418b75418757f7d9abc2fb552f38e00b7882b5e4211fca53334af94d3b76c68e16a47db15717eec928e9e9dd16b6e1eb93b29efc802336e778a51ff6c34175</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">联系作者获得密码</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>notes</category>
        <category>lifestyle</category>
      </categories>
  </entry>
  <entry>
    <title>喜欢的英文歌</title>
    <url>/dailylife-notes/society/%E8%8B%B1%E6%96%87%E6%AD%8C/</url>
    <content><![CDATA[<p>喜欢的英文歌</p>
<p>Arrietty’s song</p>
]]></content>
      <categories>
        <category>notes</category>
        <category>lifestyle</category>
      </categories>
  </entry>
  <entry>
    <title>男士形象</title>
    <url>/dailylife-notes/society/%E7%94%B7%E5%A3%AB%E5%BD%A2%E8%B1%A1/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="15e1324aa053091ca3b1fbb44c7ef884ab0fc4f0f2dd529f3a916328d7646bd9">1f1ff6fb140e19a4a5cd54e44db8b96d62ebd18c922066fd7fa98df957dd60ae5f361870c22267d6eb24cc1055eeda8cb866b9b2604a4a53156d123dbc5108099ad8aef0605e3706f607d62bf59134a3fff629ae45a009f7ad849763afec6a91ab74493faf536953050df89e7682179923416cdb796d85ee56c1b9aac1c6cffb695da66d01b9de221c836e9d1a4fe0f70942f089e7b52b4f235a9a102854693016da25377805d11151b5cb3ba569f4be9f97065b072247cb0811395a49aef9a2274d603e535c53acff68fdb29642dd613d23115486150c5d2913f44ea8348295e34ff927b0ca59d950c0601359697f243ff8202902c5dcc2c6aeaff5400dee92986271a2bee07e3e1ff623066b1e040734d5ba390298f66e05e8891c764055cd7b8e9826cdf3917eb9084980bc92f53101bc10de1bb103ac3245346f5b1af094</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">联系作者获得密码</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>notes</category>
        <category>lifestyle</category>
      </categories>
  </entry>
  <entry>
    <title>锻炼大脑的方法</title>
    <url>/dailylife-notes/society/%E9%94%BB%E7%82%BC%E5%A4%A7%E8%84%91/</url>
    <content><![CDATA[<h3 id="锻炼大脑的方法"><a href="#锻炼大脑的方法" class="headerlink" title="锻炼大脑的方法"></a>锻炼大脑的方法</h3><ul>
<li>1.长期规律的运动促进大脑产生新神经元，脑区发育等，一旦停下来一周后就会倒退。</li>
<li>2.每天玩乐，通过下棋电动做模型等多方面探索新鲜事物开发大脑。</li>
<li>3.吃东西，血糖显著影响大脑功能，提高血糖短期增加意志力。</li>
<li>4.保存意志力，不在状态不佳的时候做决定。</li>
</ul>
]]></content>
      <categories>
        <category>notes</category>
        <category>lifestyle</category>
      </categories>
  </entry>
  <entry>
    <title>A2-RL Aesthetics Aware Reinforcement Learning for Image Cropping</title>
    <url>/research-paper/drl/</url>
    <content><![CDATA[<h1 id="主题：图像裁剪"><a href="#主题：图像裁剪" class="headerlink" title="主题：图像裁剪"></a>主题：图像裁剪</h1><p>image cropping    ：根据图片的构图裁剪图像<br>点评：<a href="https://baijiahao.baidu.com/s?id=1594068742057154438&amp;wfr=spider&amp;for=pc">https://baijiahao.baidu.com/s?id=1594068742057154438&amp;wfr=spider&amp;for=pc</a><br>多数弱监督学习：基于滑动窗口机制。缺点：1.限定纵横比，裁剪大小任意。2.需要上万的备选窗口，费时间。</p>
<h1 id="我们的工作概述："><a href="#我们的工作概述：" class="headerlink" title="我们的工作概述："></a>我们的工作概述：</h1><p>将图像裁剪看成序列决策过程，提出弱监督强化学习框架：Aesthetics Aware Reinforcement Learning (A2-RL) </p>
<h2 id="framework"><a href="#framework" class="headerlink" title="framework"></a>framework</h2><p>-》尤其是提出一种关于美学图像裁剪的奖励函数<br>-》与人类裁剪图像相同，采用一种综合的状态表示法，表示当前视图和历史经验。<br>-》采用端到端的actor-critic结构训练agent智能体<br>-》agent采用一些不可视的裁剪数据集评估，发现跟原来的方法比时间快、窗口少，打到要求。</p>
<h1 id="他人工作步骤："><a href="#他人工作步骤：" class="headerlink" title="他人工作步骤："></a>他人工作步骤：</h1><p>密集提取备选窗口<br>找到每个窗口的特征<br>评估找到最佳区域</p>
<h1 id="我们评价："><a href="#我们评价：" class="headerlink" title="我们评价："></a>我们评价：</h1><p>第一个使用强化学习解决图像裁剪问题。选择窗口很快得到任意形状的结果。<br>验证数据集：[34, 11, 4]</p>
<h1 id="他人具体工作："><a href="#他人具体工作：" class="headerlink" title="他人具体工作："></a>他人具体工作：</h1><p>[15, 7, 19, 9]：设计手动的特征，基于人类的直觉和摄影的规则技巧<br>感谢深度学习和大规模数据集[22]，[16, 20, 8]使用深度学习进行审美评价<br>两种类型方法：1.基于美学。2.基于注意力机制<br>    [28, 27, 24, 2] 基于注意力：找到最显眼的东西，不考虑构图<br>    基于审美：找到最合适构图。 评价基于美学质量分类法 [23, 11]。或使用RankSVM [4] or RankNet [5]对比原始图像和裁剪图像丢弃低质量。或重定向方法 [6, 3]调整目标和原始纵横比并不丢弃重要内容。<br>两种监督：1.监督（boxs贵）。2.弱监督（滑动窗口）。取决于是否使用 bounding box annotations<br>我们使用强化学习选择窗口。<br>*Hong et al. [12]也讲看作时间序列问题，但是使用了bba<br>强化学习在图像中的成功应用：图像主题〔26〕、物体检测〔1, 13〕和视觉关系检测〔18〕<br>*active object localization method [1]在无区域检测的检测算法中表现最好<br>*tree-RL method [13]用强化学习获取区域建议比RPN [25]更好<br>#上述强化学习算法用了bba做标记，我们只用美学质量做标记。</p>
<h1 id="主题：智能体读取原始图像和窗口图像，根据经验状态做出动作分割图像，得到外部奖励，调整。"><a href="#主题：智能体读取原始图像和窗口图像，根据经验状态做出动作分割图像，得到外部奖励，调整。" class="headerlink" title="主题：智能体读取原始图像和窗口图像，根据经验状态做出动作分割图像，得到外部奖励，调整。"></a>主题：智能体读取原始图像和窗口图像，根据经验状态做出动作分割图像，得到外部奖励，调整。</h1><p>状态空间：st，当前+历史状态的集合。使用LSTM记忆历史视图。<br>动作空间：14个，大小、位置、长宽比。移动为0.05倍的图片。终止有触发器，自动停止，当奖励分数不再增加时。<br>奖励函数：用aesthetic score。比较每次和上一次。为了快点结束，加一个和次数t相关的奖励函数。<br>奖励函数：</p>
<p>。sign:符号函数？（-1/1）。t为操作次数。<br>*长宽比超过2或不足0.5，给出消极信号nr<br>ar和nr调整。</p>
<h1 id="结构："><a href="#结构：" class="headerlink" title="结构："></a>结构：</h1><p>图像：5个卷积block，1个全连block。<br>接着分为两部分。Agent:3个全连层+LSTM（长短期记忆网络）。另一部分评估。<br>两个输出：actor:critical<br><img src="https://www.evernote.com/shard/s324/res/e37077fd-deda-4974-9af3-57b1b65ff17c" alt="image"></p>
<h1 id="模型训练："><a href="#模型训练：" class="headerlink" title="模型训练："></a>模型训练：</h1><p>A3C</p>
<h1 id="模型评估："><a href="#模型评估：" class="headerlink" title="模型评估："></a>模型评估：</h1><p>数据集描述，数据集表现略。参数：相同面积/总截取面积。<br>和之前方法、不采用LSVM、不采用纵横比截取对比。</p>
<p>*来源：中科院自动化所智能计算与感知中心</p>
<p>cropping<br>裁剪<br>#proposal <br>提议\建议（region proposal ）<br>theoretically<br>理论上<br>composition<br>构图<br>optimize<br>优化<br>intuitional<br>直觉的<br>mechanism<br>机制<br>manipulate<br>操纵<br>convolution<br>卷积<br>supervision<br>监督<br>execute<br>执行<br>assess<br>评估<br>annotation<br>注释<br>converge<br>收敛<br>estimation<br>评价<br>novel<br>新的<br>heuristic<br>启发式<br>asynchronous<br>异步的<br>obtain<br>得到<br>corresponding<br>相应的<br>optimization<br>最优化<br>densely<br>密集的<br>penalty<br>刑罚<br>entropy<br>熵<br>extract<br>提取<br>modify<br>修改<br>denote<br>代表<br>inevitably<br>不可避免地<br>capture<br>捕获<br>parameters<br>参数<br>discriminate<br>辨析<br>trigger<br>触发器</p>
]]></content>
      <categories>
        <category>科研</category>
        <category>论文</category>
        <category>论文笔记</category>
        <category>深度学习</category>
        <category>强化学习</category>
      </categories>
      <tags>
        <tag>强化学习</tag>
      </tags>
  </entry>
  <entry>
    <title>机器学习-交叉熵</title>
    <url>/research-zhishidian/%E4%BA%A4%E5%8F%89%E7%86%B5/</url>
    <content><![CDATA[<p><a href="https://blog.csdn.net/tsyccnh/article/details/79163834">参考</a></p>
<p><a href="https://blog.csdn.net/zxyhhjs2017/article/details/78619756?utm_source=blogkpcl1">参考</a></p>
<p>1.信息量：一个离散型随机变量，其中某个事件发生的概率越低，信息量越大。</p>
<p>I(xi) = -log(p(xi))</p>
<p>2.熵：信息量的期望。</p>
<p> H(X) = \sum ( P(xi) * I(xi) )</p>
<p>3.KL散度：描述两个概率分布的相似程度。</p>
<p>D_{kl}(p||q) =\sum{p(xi)*log( p(xi)/q(xi) )}\\ =\sum p(xi)*log(p(xi)) - \sum p(xi)*log(q(xi))\ = H(X) - \sum p(xi)*log(q(xi))</p>
<p>4.交叉熵：KL散度计算公式的后半部分</p>
<p>H(p,q)=-\sum p(xi)log(q(xi))</p>
<p>5.机器学习中：p是标准的分布，q是网络进行训练时得到的分布。用交叉熵作为loss函数处理逻辑分类问题。</p>
<p>单分类（图像中的物体A是{a,b,c}中的一种）：直接计算。</p>
<p>多分类（图像中有多个物体，计算是否有a，是否有b，是否有c）：n-hot编码，每一位是二项分布，用sigmoid</p>
]]></content>
      <categories>
        <category>科研</category>
        <category>机器学习</category>
        <category>知识点</category>
      </categories>
      <tags>
        <tag>ML</tag>
      </tags>
  </entry>
  <entry>
    <title>图像分割评估标准</title>
    <url>/research-zhishidian/%E5%9B%BE%E5%83%8F%E5%88%86%E5%89%B2%E5%B8%B8%E7%94%A8%E8%AF%84%E6%B5%8B%E6%8C%87%E6%A0%87/</url>
    <content><![CDATA[<p><a href="https://blog.csdn.net/niaolianjiulin/article/details/53098437">https://blog.csdn.net/niaolianjiulin/article/details/53098437</a></p>
]]></content>
      <categories>
        <category>科研</category>
        <category>机器学习</category>
        <category>知识点</category>
        <category>计算机视觉</category>
        <category>图像分割</category>
      </categories>
      <tags>
        <tag>图像分割</tag>
      </tags>
  </entry>
  <entry>
    <title>神经网络相关</title>
    <url>/research-zhishidian/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E8%AE%AD%E7%BB%83/</url>
    <content><![CDATA[<p>1.神经网络：带有成千上万个参数的分层的大型数学公式，从每一层传播到下一层时呈全连接结构，参数为连接强度（强度大，关联大）和偏移量，经过几层映射后从原始数据到最终的结果。{例：从手写数字识别中，从700多个像素点的图像，到0-9的10个点的输出层，输出信号为这个数字是几的判断}</p>
<p>2.模型训练：根据样本期望的输出，以及模型得到的真实输出比较，调整神经网络每相邻两层映射间的参数。{例：手写数字识别中，代价为一组数据中，每个数据，预测每个数字时，p(xi)和{0或1}的差值的平方}</p>
<p>3.反向传播算法(BMP)：从输出层到输入层，每相邻两层i和i-1间，将i层所有数据对结点权值的变化的希望相加，作为一次对i-1层的调整。然后根据第i层受到调整的程度，继续向前调整第i-1层。</p>
<p>4.梯度下降：梯度是使带有多个参数的函数变化最快的方向，梯度下降是一个人通过计算所有数据的梯度，然后沿着负梯度方向一步一步下山。</p>
<p>5.随机梯度下降：由于梯度下降每一步计算量过大，将数据分成一些组（bench），每次计算某一组的梯度然后下山。不一定每一步都是全局梯度，但是整体速度明显提升。</p>
]]></content>
      <categories>
        <category>科研</category>
        <category>机器学习</category>
        <category>知识点</category>
      </categories>
      <tags>
        <tag>ML</tag>
        <tag>神经网络</tag>
      </tags>
  </entry>
  <entry>
    <title>Attention-aware deep reinforcement learning for video face recognition</title>
    <url>/research-paper/drl2/</url>
    <content><![CDATA[<p>用drl训练注意力模型，判断两个视频的人脸是否相同。drl的工作是在一堆帧中选择一个丢弃。</p>
]]></content>
      <categories>
        <category>科研</category>
        <category>论文</category>
        <category>论文笔记</category>
        <category>深度学习</category>
        <category>强化学习</category>
      </categories>
      <tags>
        <tag>强化学习</tag>
      </tags>
  </entry>
  <entry>
    <title>Collaborative Deep Reinforcement Learning for Joint Object Search</title>
    <url>/research-paper/drl3/</url>
    <content><![CDATA[<p>协助的多智能体 deep RL algorithm 来学习进行联合物体定位的最优策略。我们的 proposal 服从现有的 RL 框架，但是允许多个智能体之间进行协作。在这个领域当中，有两个开放的问题：</p>
<p>　　1. how to make communications effective in between different agents ; </p>
<p>　　2. how to jointly learn good policies for all agents. </p>
<p>　　</p>
<p>　　本文提出通过 gated cross connections between the Q-networks 来学习 inter-agent communication。</p>
<p>　　</p>
<p>　　所提出的创新点：</p>
<p>　　1. 是物体检测领域的第一个做 collaborative deep RL algorithm ；</p>
<p>　　2. propose a novel multi-agent Q-learning solution that facilitates learnable inter-agent communication with gated cross connections between the Q-networks；</p>
<p>　　3. 本文方法有效的探索了 相关物体之间有用的 contextual information，并且进一步的提升了检测的效果。</p>
<p>多个agent移动</p>
]]></content>
      <categories>
        <category>科研</category>
        <category>论文</category>
        <category>论文笔记</category>
        <category>深度学习</category>
        <category>强化学习</category>
      </categories>
      <tags>
        <tag>强化学习</tag>
      </tags>
  </entry>
  <entry>
    <title>CIRL - Controllable Imitative Reinforcement Learning for Vision-based Self-driving</title>
    <url>/research-paper/drl4/</url>
    <content><![CDATA[<p>开车，<br>action：沿路行，下个路口直行左右转。普通。<br>reward：方位和speed。<br>根据人类的驾驶视频setting。<br>实验效果一般般。</p>
<p>为了能train出DDPG，先使用监督的数据训练以达到一个好的初始化，通过controllable gating mechanism将各个可能的动作都执行，同时根据reward信号提升DDPG的效果</p>
]]></content>
      <categories>
        <category>科研</category>
        <category>论文</category>
        <category>论文笔记</category>
        <category>深度学习</category>
        <category>强化学习</category>
      </categories>
      <tags>
        <tag>强化学习</tag>
      </tags>
  </entry>
  <entry>
    <title>Context-Reinforced Semantic Segmentation</title>
    <url>/research-paper/drl5/</url>
    <content><![CDATA[<p><a href="https://blog.csdn.net/LawenceRay/article/details/95174059">参考</a></p>
<p>cvpr2019，使用DRL交互学习上下文网络和分割网络。<br>结合context的语义分割<br>C-net上下文网络：智能体。<br>S-net分割网络：生成p-map（预测结果），作为环境。原图提取特征和Pyramid Pooling。</p>
<p>将上下文学习问题定义为马尔科夫决策过程，并提出通过C Net、S Net之间的交互来学习上下文。这一优化过程可以通过深度强化学习解决，将p-map视作环境而C Net视作智能体。   </p>
<p>细节不是很明确</p>
<p>DRL使用A3C，细节被忽略。</p>
]]></content>
      <categories>
        <category>科研</category>
        <category>论文</category>
        <category>论文笔记</category>
        <category>深度学习</category>
        <category>强化学习</category>
      </categories>
      <tags>
        <tag>强化学习</tag>
      </tags>
  </entry>
  <entry>
    <title>Crafting a Toolchain for Image Restoration by Deep Reinforcement Learning</title>
    <url>/research-paper/drl6/</url>
    <content><![CDATA[<h1 id="主题：多工具图像复原"><a href="#主题：多工具图像复原" class="headerlink" title="主题：多工具图像复原"></a>主题：多工具图像复原</h1><ul>
<li>  原文：<a href="http://mmlab.ie.cuhk.edu.hk/projects/RL-Restore/">http://mmlab.ie.cuhk.edu.hk/projects/RL-Restore/</a></li>
<li>  点评：<a href="https://zhuanlan.zhihu.com/p/37380185?edition=yidianzixun&amp;utm_source=yidianzixun&amp;yidian_docid=0JAPpaZE">https://zhuanlan.zhihu.com/p/37380185?edition=yidianzixun&amp;utm_source=yidianzixun&amp;yidian_docid=0JAPpaZE</a><h1 id="工作："><a href="#工作：" class="headerlink" title="工作："></a>工作：</h1>工具箱 不同复杂程度的小规模卷积神经网络<br>RL-Restore 从工具箱选取合适的工具恢复损坏的图像<br>创建一个按步的奖励函数：图像每一步恢复的怎么样<br>领域：图像去模糊、去噪等存在多种问题时的处理。<br>low-level vision tasks such as deblurring [31, 35, 42]去模糊,  denoising [6, 24]去噪, JPEG artifacts reduction [7, 9, 41]（？可能是jpeg压缩损失） and super-resolution [8, 19, 17, 37, 39]（超分辨率：低分辨率图片-&gt;高清图片）<h1 id="其他人："><a href="#其他人：" class="headerlink" title="其他人："></a>其他人：</h1></li>
</ul>
<p>1.大神经网络瞎搞 2.针对单一的问题。<br>缺点：耗时和浪费资源、不透明</p>
<h1 id="我的改进：小型工具、多个不同复杂度的神经网络、通过RL选取合适工具。透明、快速。"><a href="#我的改进：小型工具、多个不同复杂度的神经网络、通过RL选取合适工具。透明、快速。" class="headerlink" title="我的改进：小型工具、多个不同复杂度的神经网络、通过RL选取合适工具。透明、快速。"></a>我的改进：小型工具、多个不同复杂度的神经网络、通过RL选取合适工具。透明、快速。</h1><p>难点：调整程度、工具使用顺序；不可逆、相互影响</p>
<h1 id="Agent"><a href="#Agent" class="headerlink" title="Agent:"></a>Agent:</h1><p>action（略）、state（当前图像，历史动作向量）<br>award: 处理前后PSNR差值（很方便换其他的，如perceptual loss [18],GAN loss）<br><img src="https://www.evernote.com/shard/s324/res/8e5b3ee6-f383-4523-8e19-9064b0b15f1d" alt="img"><br>结构：<br>Feature Extractor: 一个全联层+4层CNN<br>LSTM:长短期记忆网络<br>One-hot Encoder: 独热编码</p>
<h1 id="训练："><a href="#训练：" class="headerlink" title="训练："></a>训练：</h1><p>Deep Q-learning<br>MSE均方误差最低。<br>损失函数：</p>
<p> r = 0.99<br>两种更新：<br>1.随机。2.序列更新<br>联合训练：<br>对于输入图像，先通过工具链前向传播得到最后的复原图像，通过与清晰参考图像对比得到MSE损失，然后通过工具链对误差进行反向传播，根据平均的梯度值更新工具网络的参数<br>学习：初始学习度0.1，每20代减少0.1。使用Adam [21] optimizer训练Agent</p>
<h1 id="结果："><a href="#结果：" class="headerlink" title="结果："></a>结果：</h1><p>和DnCNN [44]and VDSR [19]对比，效果相似的情况下复杂度明显降低</p>
<h1 id="分析："><a href="#分析：" class="headerlink" title="分析："></a>分析：</h1><p>1.工具链长度、数量：12/3.<br>2.奖励函数：对比多个运行效果。采用的不见得最好，比其他表现好。<br>3.自动停止：奖励函数下降不超过0.15db时自动停止。小的失真如果不停止容易过度修复。</p>
<h1 id="优点：新思路。"><a href="#优点：新思路。" class="headerlink" title="优点：新思路。"></a>优点：新思路。</h1><p>多工具自适应，解决其他图像处理的问题。<br>在细节上没有什么新鲜的，工具也比较简单。</p>
<h2 id="来源：sensetime"><a href="#来源：sensetime" class="headerlink" title="来源：sensetime"></a>来源：sensetime</h2><p>complexity<br>复杂性<br>artifacts<br>人工制品<br>parameter<br>参数<br>specialized<br>专业的<br>degradation<br>毁坏<br>severity<br>严重程度<br>appropriate<br>合适的，适当的<br>inherently<br>固有地<br>progressively<br>逐步地<br>scheme<br>方案<br>collaboratively<br>协同地<br>deem<br>认为<br>conventional<br>传统的<br>philosophy<br>哲学<br>depict<br>描绘<br>distortions<br>畸变<br>adaptively<br>自适应<br>simultaneously<br>同时地<br>immense<br>巨大的<br>aforementioned<br>上述<br>extent<br>程度<br>demonstrated<br>论证<br>potentially<br>潜在地<br>simultaneously<br>同时地<br>discriminative<br>判别式<br>contaminated<br>污染<br>recursion<br>递归<br>compression<br>压缩<br>distortion<br>失真<br>orthogonal<br>正交<br>incorporated<br>合并<br>mechanism<br>机制<br>hallucination<br>幻觉<br>out-of-focus blur<br>失焦模糊<br>exposure<br>暴露<br>intermediate<br>中间的<br>irreversible<br>不可逆<br>Markov Decision Process<br>马尔可夫决策<br>refine<br>精炼<br>propose<br>建议<br>recurrent<br>复发的<br>plausible<br>貌似有理的<br>corrupt<br>腐坏的<br>robustness<br>鲁棒性<br>essential<br>本质的<br>derive<br>得到<br>empirically<br>经验性的<br>depict<br>描绘<br>concatenated<br>级联的<br>derived<br>衍生的<br>episode<br>片段<br>sequential<br>时序<br>gradient<br>梯度<br>iteration<br>迭代、重复</p>
]]></content>
      <categories>
        <category>科研</category>
        <category>论文</category>
        <category>论文笔记</category>
        <category>深度学习</category>
        <category>强化学习</category>
      </categories>
      <tags>
        <tag>强化学习</tag>
      </tags>
  </entry>
  <entry>
    <title>Deep Alignment Network- A convolutional neural network for robust face alignment</title>
    <url>/research-paper/drl7/</url>
    <content><![CDATA[<p>DAN是一种人脸对齐的方法，采用级联神经网络结构，充分利用人脸的全局信息而非局部信息，使其效果优于现有的人脸对齐方法。<br>       该方法的总体思想为如下几步：<br>       1）DAN 参考CSR的框架，通过前向深度网络提取特征代替人工特征，训练前向网络得到关键点位的偏差代替CSR中的回归器<br>       2）用级联的网络结构来实现CSR中的迭代<br>       3）利用人脸全局信息T(I)、H、F作为前向网络的输入，得到关键点位的偏差<br>       4）构造级联网络结构<br>       5）分级训练网络，每级网络loss停止收敛时，训练下一级网络。</p>
]]></content>
      <categories>
        <category>科研</category>
        <category>论文</category>
        <category>论文笔记</category>
        <category>深度学习</category>
        <category>强化学习</category>
      </categories>
      <tags>
        <tag>强化学习</tag>
      </tags>
  </entry>
  <entry>
    <title>Deep Reinforcement Learning of Region Proposal Networks for Object Detection</title>
    <url>/research-paper/drl8/</url>
    <content><![CDATA[<p>主题：用DRL改进基于RPN网络的目标检测。</p>
<p>Region Proposal Network：<br>每个点有3种长宽比*3种大小尺寸的窗口。选择跟groundtruth匹配度最高的窗口。<br>fast-RCNN:每一部分区域选择匹配最高的窗口，迭代。<br>文章：通过DRL选择窗口，提高准确度和速度。<br><img src="https://www.evernote.com/shard/s324/res/66418cc7-979f-4cc0-887f-f2acb8e60f25" alt="img"></p>
]]></content>
      <categories>
        <category>科研</category>
        <category>论文</category>
        <category>论文笔记</category>
        <category>深度学习</category>
        <category>强化学习</category>
      </categories>
      <tags>
        <tag>强化学习</tag>
      </tags>
  </entry>
  <entry>
    <title>Distort-and-Recover_ Color Enhancement using Deep Reinforcement Learning</title>
    <url>/research-paper/drl9/</url>
    <content><![CDATA[<p>主题：色彩增强<br>原文：<a href="https://www.arxiv-vanity.com/papers/1804.04450/">https://www.arxiv-vanity.com/papers/1804.04450/</a><br>简介：使用DRL的颜色增强方法，选取图像增强的操作。训练使用高质量图像，进行扭曲-恢复的训练。（！这个可以节省标记时间和成本和主观性，为其他提供参考）</p>
<p>#感觉跟修复受损图像的有点像啊</p>
<h1 id="他人工作："><a href="#他人工作：" class="headerlink" title="他人工作："></a>他人工作：</h1><p>Exemplar-based methods：（不用管了）<br>基于学习： 源颜色分布到目标颜色分布</p>
<ul>
<li>多模态问题：？？<br>我们：马尔科夫决策过程，将修饰看作全局颜色调整。<br>基本操作：亮度、对比度、白平衡</li>
</ul>
<p>#不同图像受到不同人群喜爱：改变重一点轻一点。<br>#逆过程（有人要吗？？）；滤镜添加<br>#想法：锐化等。图像局部处理（目标检测/图像分割+处理过程）。<br>#随机训练：但是可能和现实可能见到的图片相差甚远。现实。死黑死白到失真问题。</p>
<h1 id="对比："><a href="#对比：" class="headerlink" title="对比："></a>对比：</h1><p>基于关键词搜索；基于图片风格搜索； 数据库中找到候选图像，然后搜索局部颜色增强算子。<br>基于学习：深度。。<br>和我们最接近：Yan \etal[19] 。区别：我们的智能体直接选择一个操作。不需要按步骤评价。不受限于数据集。动作集不受限。<br>之前的数据集有分布偏差，需要训练对得到特定分布，泛化性差。<br>生成对抗网络：可以用于此工作。*一个生成对抗网络的应用例子。</p>
<h1 id="模型："><a href="#模型：" class="headerlink" title="模型："></a>模型：</h1><p>目标函数：人类输入图像作为标准背景、我们要的图像跟它比最接近。<br><img src="https://www.evernote.com/shard/s324/res/be3a7ba2-d791-4b9e-a2aa-3358561f3a83" alt="img1"><br>最小。<br>对比函数：<br><img src="https://www.evernote.com/shard/s324/res/cfd53a08-5e39-4254-bd21-1e8940b814fc" alt="img2"><br>马尔可夫决策：状态（上下文+颜色）、动作。。<br>deterministic 每一步操作确定。<br>加上次数t:<br><img src="https://www.evernote.com/shard/s324/res/6bf57f00-1ec3-4993-bc9c-e88deee3b466" alt="img3"></p>
<h1 id="框架：Q-learning"><a href="#框架：Q-learning" class="headerlink" title="框架：Q-learning"></a>框架：Q-learning</h1><p>学习：选取最高。<br>#此算法是贪心。考虑采用其他选取方法？</p>
<p>动作空间: #叠加有效。<br><img src="https://www.evernote.com/shard/s324/res/cf41a78b-dda8-4df0-b545-9cd83e9bb022" alt="img4"></p>
<p>？语境特征： CIELab</p>
<h1 id="训练："><a href="#训练：" class="headerlink" title="训练："></a>训练：</h1><p>1.扭曲-恢复训练。选取一些简单、实际、非线性类型的随机扭曲</p>
<p>基于tf， Adam优化器</p>
<p>特征选择：sixth layer of VGG16 [16] model</p>
<h1 id="优点：1-最重要：扭曲恢复方法。2-强化学习还可以。"><a href="#优点：1-最重要：扭曲恢复方法。2-强化学习还可以。" class="headerlink" title="优点：1.最重要：扭曲恢复方法。2.强化学习还可以。"></a>优点：1.最重要：扭曲恢复方法。2.强化学习还可以。</h1><hr>
<p>pose estimation 姿态估计<br>semantic &lt;语&gt;语义的，语义学的<br>segmentation 分割; 分段; 切分; 分节<br>sophisticated 复杂的; 精致的; 富有经验的; 深奥…<br>distortion 扭曲，变形; 失真，畸变; 扭转<br>terminate 结束; 使终结; 解雇; 到达终点站; 结束的<br>Notation 记号，标记法<br>recognition 意识<br>threshold 阈值<br>Temporal 时间的; 世俗的; 暂存的; &lt;语&gt;表示时…<br>Inference 推理; 推断; 推论<br>Intuitively 直觉地，直观地; 由直觉而得地<br>gradient 梯度，陡度; 变化率，梯度变化曲线; &lt;…<br>in line with 本着; 跟…一致，符合<br>recognition network 识别网络</p>
]]></content>
      <categories>
        <category>科研</category>
        <category>论文</category>
        <category>论文笔记</category>
        <category>深度学习</category>
        <category>强化学习</category>
      </categories>
      <tags>
        <tag>强化学习</tag>
      </tags>
  </entry>
  <entry>
    <title>Deep Progressive Reinforcement Learning for Skeleton-based Action Recognition</title>
    <url>/research-paper/drl10/</url>
    <content><![CDATA[<p>主题：视频中，基于骨架的行为识别。<br>解读：<a href="https://blog.csdn.net/b224618/article/details/81143736">https://blog.csdn.net/b224618/article/details/81143736</a><br>解读：<a href="https://blog.csdn.net/chenhaojing/article/details/81476244">https://blog.csdn.net/chenhaojing/article/details/81476244</a></p>
<h1 id="其他人：用DRL做行为识别的很少、类似的工作一般一次提取一个关键帧"><a href="#其他人：用DRL做行为识别的很少、类似的工作一般一次提取一个关键帧" class="headerlink" title="其他人：用DRL做行为识别的很少、类似的工作一般一次提取一个关键帧"></a>其他人：用DRL做行为识别的很少、类似的工作一般一次提取一个关键帧</h1><h1 id="框架：用DRL训练-FDNet提取关键帧，用GCNN训练。"><a href="#框架：用DRL训练-FDNet提取关键帧，用GCNN训练。" class="headerlink" title="框架：用DRL训练 FDNet提取关键帧，用GCNN训练。"></a>框架：用DRL训练 FDNet提取关键帧，用GCNN训练。</h1><p><img src="https://www.evernote.com/shard/s324/res/5ecd3f73-c778-4fb3-abae-e88fae03e107" alt="img1"></p>
<h1 id="RL"><a href="#RL" class="headerlink" title="RL:"></a>RL:</h1><p>状态：F\M\Sb<br>F:global frames: 所有帧的信息：帧数<em>关键点数</em>三个维度。<br>    *帧非整数：双三次插值。保证首尾与原相同。<br>        * 双三次插值（英语：Bicubic interpolation）是二维空间中最常用的插值方法。<br>M:selected frames：当前被选择帧的信息。<br>Sb:被选择帧的掩码</p>
<p>动作：向哪个方向移动帧（3种）<br>    *移动有固定范围，不会交叉。上下界：当前帧和下一帧的一半<br>奖励：GCNN训练好。从绝对正确帧与错误帧跳跃时加大奖励惩罚，其他用<br><img src="https://www.evernote.com/shard/s324/res/f4e441d0-20a9-49cf-ab77-01a0413e73ff" alt="img2"></p>
<p>GCNN:（这里有一些数学公式没看懂）<br>构图，后卷积<br><img src="https://www.evernote.com/shard/s324/res/6e5d1d7a-34fe-4bee-8e7f-d33aa4d94b26" alt="img3"></p>
<p>loss function选取的是交叉熵（= =） <br>    *交叉熵：度量两个概率分布间的差异性信息</p>
<p>训练：使用 policy gradient。Deep Q-learning工作量大。<br>算法：先用等间距帧训练GCNN，之后训练和用DRL调整。</p>
<h1 id="评价"><a href="#评价" class="headerlink" title="评价"></a>评价</h1><p>优点：在动作识别领域，增强学习的应用还不多。基于骨架的CNN，之前研究只考虑互连骨架，其实不互连的也有用。<br>缺点：1.关键帧数量。2.移动卡住，有些范围无法达到等问题。3.正确帧一个范围。4.有的帧从对到错，有的帧从错到对（r是累加的？还是一个？）<br>    *这个帧移动/奖励函数 的机制一定有问题，可以构造一下看看。但是DRL本来就不能解决。。</p>
<hr>
<p>vertex<br>顶点<br>cross-entropy<br>交叉熵<br>sensory<br>感觉<br>mutually<br>交互地<br>frame<br>框架</p>
<p>concatenate<br>连接</p>
<p>aggregate<br>总计的</p>
<p>enforce<br>执行</p>
]]></content>
      <categories>
        <category>科研</category>
        <category>论文</category>
        <category>论文笔记</category>
        <category>深度学习</category>
        <category>强化学习</category>
      </categories>
      <tags>
        <tag>强化学习</tag>
      </tags>
  </entry>
</search>
